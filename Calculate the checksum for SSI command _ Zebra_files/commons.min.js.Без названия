(function($) {
    $(window).on('load', (function() {
        try {
            $(".regular").slick({
                dots: false,
                infinite: true,
                speed: 300,
                slidesToShow: 8,
                slidesToScroll: 8,
                prevArrow: '<a class="slick-prev slick-arrow"><i class="fa fa-angle-left"></i></a>',
                nextArrow: '<a class="slick-next slick-arrow"><i class="fa fa-angle-right"></i></a>',
                responsive: [{
                        breakpoint: 1024,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 3,
                            infinite: true,
                            dots: false
                        }
                    }, {
                        breakpoint: 600,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    }, {
                        breakpoint: 480,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }
                    // You can unslick at a given breakpoint now by adding:
                    // settings: "unslick"
                    // instead of a settings object
                ]
            });
        } catch (err) {

        }
    }));
       $(window).on("load resize", function() {
           $("video[autoplay]").attr("data-analytics-autotrack", "false");
           $("video[loop]").attr("data-analytics-autotrack", "false");
       });
})(jQuery);
var doSubmit = false;
var form;
var recaptchformid;

function reCaptchaCallback(response) {
    if (response === document.querySelector('.g-recaptcha-response').value) {
        doSubmit = true;
    }
    if(doSubmit) {
        document.forms[recaptchformid].submit();
    }
}

function detectIE() {
    var ua = window.navigator.userAgent;

    var msie = ua.indexOf('MSIE ');
    if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }

    var trident = ua.indexOf('Trident/');
    if (trident > 0) {
        // IE 11 => return version number
        var rv = ua.indexOf('rv:');
        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
    }

    var edge = ua.indexOf('Edge/');
    if (edge > 0) {
       // Edge (IE 12+) => return version number
       return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
    }

    // other browser
    return false;
}

function onload() {
    for (var i = 0; i < document.forms.length; ++i) {
        form = document.forms[i];
		recaptchformid=form.id;//this is to capture form id
        form.onsubmit = function (evt){
            evt.preventDefault();
            var arr = document.getElementsByClassName("form_leftcolmark");
            var executeCaptcha = true;
            $.each(arr, function(index, value) {
                // checking only for Mandatory fields
                if(value.innerHTML.indexOf("*") != -1 && $(value).is(":visible")) {
                    var test = $(value).closest(".form_row");
                    //validating Radio buttons is checked if present
                    //Fetching the parent of the radio buttons in the form
                    if($(test).parent().prop('className').indexOf('radio') != -1){
                        var parentRadio = $(value).closest(".section.radio");
                        var tempFlag = false;
                        //looping through each radio button
                        $(parentRadio).find($('input')).each(function(){
                             // at least one of the radio buttons was NOT checked
                            if ($(this).prop("checked")) {
                                tempFlag = true;
                                return false;
                            }
                        });
                        if(!tempFlag) {executeCaptcha = false;}
                    }//checking if any of the checkbox  is left blank if mandatory
					else if($(test).parent().prop('className').indexOf('checkbox') != -1){
                       var parentCheckBox = $(value).closest(".checkbox.section");
                        var tempFlag = false;
                        $(parentCheckBox).find($('input')).each(function(){
                             // at least one of the checkbox buttons was  checked
                            if ($(this).prop("checked")) {
                                tempFlag = true;
                                return false;
                            }
                        });
                        if(!tempFlag) {executeCaptcha = false;}

                    }
                    //checking if any of the mandatory textField is left blank
                    else if(!$(test).find(".form_field").val() && !$(test).find(".form_field").prop('disabled')) {
						if($(test).find(".form_field").val()!=undefined && $(test).find(".form_field").prop('disabled')!=undefined) {
							executeCaptcha = false;
						}
                    }
                }
            });
            if(executeCaptcha) {
                grecaptcha.execute();
            }
        };
    }
}

function getNumberText(number) {
    switch(number) {
        case 0:
            return 'zero';
        case 1:
            return 'one';
        case 2:
            return 'two';
        case 3:
            return 'three';
        case 4:
            return 'four';
        case 5:
            return 'five';
        case 6:
            return 'six';
        case 7:
            return 'seven';
        case 8:
            return 'eight';
        case 9:
            return 'nine';
        case 10:
            return 'ten';
    }
}

function onIE() {
    var number = Math.floor(Math.random() * 10),
        newCaptcha = $('<label class="ieCaptchaLabel">Security Check</label><br><input class="ieCaptcha" maxlength="2" type="input" placeholder="Enter the number '+ getNumberText(number) + '" data-num="' + number + '" />');

    $('.g-recaptcha').replaceWith(newCaptcha);

    $("form").submit(function() {
        var captcha = $(this).find('.ieCaptcha');
        // console.log('val', captcha.val());
        // console.log('data', captcha.data('num'));
        if( captcha.val() != captcha.data('num') ) {
            $(this).find('.ieCaptchaLabel').addClass('form_error').text('Must enter correct number before submitting form');
            return false;
        }

        $(this).find('.ieCaptchaLabel').removeClass('form_error').text('Success');
    });
}
/*

FILE: Zebra.js
DESCRIPTION: Basic App functions and config
AUTHOR(S): Jesse Weed

*/

var Zebra = window.Zebra || {};

/* - - - - - - - - - - - - - - - - - >

CONFIGURATION & INITILIZATION

< - - - - - - - - - - - - - - - - - */

Zebra.config = {  // GLOBAL CONFIG SETTINGS

	// SET TO FALSE TO DISABLE LOGGING TO CONSOLE
	debug : false,

	// BASE URL'S
	url : {
		base: window.location.protocol + '//' + window.location.hostname + (window.location.port !== '' ? ':' + window.location.port : '') + '/', //BASE URL
	},

	dir : {
		css: 'css/',
		dist: '_dist/',
		img: 'img/',
		js : 'js/',
		lib: 'lib/'
	}

}; // END: config



/* - - - - - - - - - - - - - - - - - >

FUNCTIONS

< - - - - - - - - - - - - - - - - - */


Zebra.init = function ( ) {  // INITALIZE

	var self = this;
	//Adding guard to prevent Zebra.init from being called twice
    if (self.__called) {
        console.log("Warning! Zebra Init called multiple times!");
        return;
    }
    else {
        self.__called = true;
    }

	self.logFunction('Zebra.init()');

    if(self.Browser) self.Browser.init();
    if(self.Form) self.Form.init();
    if(self.Search) self.Search.init();
    if(self.Storage) self.Storage.init();
    if(self.Utility) self.Utility.init();
    if(self.Social) self.Social.init();
    if(self.Collapse) self.Collapse.init();
    if(self.BackgroundImage) self.BackgroundImage.init();
    if(self.Image) self.Image.init();
    if(self.CampaignNav) self.CampaignNav.init();
	if ( self.Video ) self.Video.init();
	if ( self.videoGrid ) self.videoGrid.init();
	//commented heroCarousel as js error was coming up due to additional call of init and casuing  js error due 
	// to which login buttons were not displaying sub buttons login and register
	//if(self.heroCarousel) self.heroCarousel.init();
	//  if ( self.fullWidthImage ) self.fullWidthImage.init();

	//  if ( self.Animation ) self.Animation.init();
	if(self.circlePromo) self.circlePromo.init();
	if ( self.Link ) self.Link.init();
	if(self.thumbGrid) self.thumbGrid.init();

	if(self.Dialogs) self.Dialogs.init();

	if(self.downloadList) self.downloadList.init();
	if(self.searchAccessories) self.searchAccessories.init();
	if(self.productOverview) self.productOverview.init();
	if(self.socialshare) self.socialshare.init();

    if(self.PageAndFileList) self.PageAndFileList.init();
    if(self.LoginButton) self.LoginButton.init();
    if(self.LoginComponent) self.LoginComponent.init();
    if(self.LoginState) {
        self.LoginState.init();
    } else {
        self.loginStateLoaded = self.loginStateLoaded || $.Deferred();
        self.loginStateLoaded.resolve();
    }
}; // END: init()

// END OF FILE: Zebra

(function (document, window, location, $, JSON) {
    var userDetailsDeferred;

    Zebra = window.Zebra || {};
    AnalyticsDataLayer = window.AnalyticsDataLayer || {};
    
    Zebra.getUserDetails = function () {
        if (!userDetailsDeferred) {
            userDetailsDeferred = $.Deferred();

            $.ajax({
                dataType: 'json',
                url: '/bin/zebra/currentuserdetails.json',
                cache: false,
                success: function (userDetails) {
                    userDetailsDeferred.resolve(userDetails);
                }
            });

        }
        return userDetailsDeferred.promise();
    };

    // loginHref remains distributed amongst links to give partial support in case of js failure.
    Zebra.performLogin = function (loginHref) {
        var expirationDate = new Date();

        // Expire in 30 minutes
        expirationDate.setTime(expirationDate.getTime() + 1800000);

        document.cookie = 'saml_request_path=' + document.location.pathname + ';expires=' + expirationDate.toGMTString() + ';path=/;secure;';

        document.location = loginHref;
    };

    // loginHref remains distributed amongst links to give partial support in case of js failure.
    Zebra.performLogout = function (logoutHref) {
        $.get('/bin/zebra/logout').always(function () {
            document.location = logoutHref;
        });
    };

    // analytics to track entitlement
    Zebra.entitlementAnalytics = {
        constants: {
            ASSET_DOWNLOAD_EVT: 'assetDownload',
            ASSET_DECLINED_EVT: 'assetDeclined',
            USER_ANALYTICS_KEY: 'user_download_analytics',
            ASSET_ANALYTICS_KEY: 'entitlement_analytics',
            FORM_ANALYTICS_KEY: 'analytics_form',
            FORM_VIEW_EVT: 'formView',
            FORM_COMPLETE_EVT: 'formComplete'
        },
        trackUserDownload: function (eventTypes, track, formData) {
            var constants = Zebra.entitlementAnalytics.constants;
            var analyticsCookie = {};
            var userAnalytics = {};
            var trackType = 'tl_d';
            var events = {};

            $.each(eventTypes, function (index, eventType) {
                events[eventType] = true;
            });

            try {
            var entitlementAnalyticsKey=Zebra.entitlementAnalytics.getCookieValue(constants.ASSET_ANALYTICS_KEY);
            if(!$.isEmptyObject(entitlementAnalyticsKey)) {
                analyticsCookie = JSON.parse(Zebra.entitlementAnalytics.getCookieValue(constants.ASSET_ANALYTICS_KEY).slice(1, -1).replace(/\\/g, ""));
                userAnalytics = JSON.parse(decodeURIComponent(Zebra.entitlementAnalytics.getCookieValue(constants.USER_ANALYTICS_KEY)));
                }
            } catch (e) {
                console.log(e);
            }

            if (!$.isEmptyObject(analyticsCookie)) {
                var payload = {
                    user: userAnalytics,
                    events: events,
                    asset: analyticsCookie
                };

                if (formData) payload.form = formData;

                if (track){ 
                    s.trackData(payload, trackType); 
                } else {
                    AnalyticsDataLayer.user = payload.user;
                    AnalyticsDataLayer.events = payload.events;
                    AnalyticsDataLayer.asset = payload.asset;
                    if (formData) AnalyticsDataLayer.form = formData;
                }
            }
            return true;
        },
        getCookieValue: function (key) {
            var cookieKey = key + '=';
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = cookies[i];
                while (cookie.charAt(0) == ' ') {
                    cookie = cookie.substring(1);
                }

                if (cookie.indexOf(cookieKey) == 0) {
                    return cookie.substring(cookieKey.length, cookie.length);
                }
            }
            return '';
        },
        setUserAnalytics: function (cookieKey, user) {
            var userDetails = {};
            var analytics = Zebra.entitlementAnalytics;
            var userAnalytics = analytics.getCookieValue(analytics.constants.USER_ANALYTICS_KEY);
            
            if(userAnalytics) {
                userDetails.user = JSON.parse(decodeURIComponent(analytics.getCookieValue(analytics.constants.USER_ANALYTICS_KEY)));
            } else if (user) {
                userDetails = {
                    user: {
                        'ZUID': user.userId,
                        'company': user.company,
                        'type': user.userType,
                        'country': user.country
                    }
                };
            }

            if (!$.isEmptyObject(userDetails) && userDetails.user.ZUID !== 'anonymous') {
                document.cookie = cookieKey + '=' + JSON.stringify(userDetails) + ';path=/;secure;';
            }
        }

    };

})(document, window, location, jQuery, JSON);

$(function() {

    // On button click, set cookie and hide popup based on site you are on
	$('.cookieBtn').click(function(e) {
		e.preventDefault();
		setCookie('cookie-msg-read-zebraDotCom', 'yes', 14);
		$('.cookie-container').hide();
		$('.cookie').hide();
		//fix height of content to not show behind header
		if($('body').hasClass('has-secondary-nav')) {
            $('#main-content').css("margin-top", ($(".global-header").height() + $(".secondarynavigation").height())+"px");
            $('.secondarynavigation').css("margin-top", ($(".global-header").height())+"px");
        }
        else {
            $('#main-content').css("margin-top", ($(".global-header").height())+"px");
        }
	});

// If no cookie set, show the popup
	var cookieValue = getCookie('cookie-msg-read-zebraDotCom');
    if (cookieValue == null || cookieValue.length == 0) {
		$('.cookie-container').show();
	}
	else {
	   $('.cookie-container').hide();
	   $('.cookie').hide();
	   $('.cookiepar').css("border-bottom","none");
	}
});
function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for(var i = 0; i <ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

function setCookie(a, d, b) {
    var e = new Date();
    e.setDate(e.getDate() + b);
    var c = escape(d) + ((b == null) ? "" : "; expires=" + e.toUTCString() + ";path=/");
    document.cookie = a + "=" + c
}

$(document).ready(function() {
  /***footer test spacing made to be consistent for Touch UI and and Classic****/
 $('.global-footer div.new.section').each(function (index, value) {
    	$(this).css('height','0px');$(this).css('margin','0px');
	});
  /***footer - CTA button height is made to be consistent for Touch UI and Classic****/	
 $('.call-to-action>div:has(a.primary)').each(function() { 
		var buttonHeight=$(this).height();
            if(buttonHeight>=35){
                 $('.call-to-action>div:has(a.primary)').addClass('button-wrapper');
            }

 	});
 	if($('.shaded-box-container li').parents('.call-to-action').length == 1) {
 		$('.shaded-box-container li').css('width','100%');
 		 $('.shaded-box-container ul').css('margin-top','-10px');
 	}
});
//Use this file for analytic methods that should be tracked on all pages
jQuery(function() {

    $(window).on("load", function() {
        if (window._trackData && !window.location.pathname.includes("etc")) {
            var pageTemplate = document.querySelector("meta[property='page-template']") ?
               document.querySelector("meta[property='page-template']").getAttribute("content").split("/").pop()
               : "responsive";
            //Adding if statement to set al user reg pages to use 'en' for language cause they are always english
            // but don't have html lang tag Logic: get lang from html tag > true = use that, false: check if user
            // reg page > true = use 'en', false = n/a
            var lang = document.getElementsByTagName("html")[0].getAttribute("lang") ?
                document.getElementsByTagName("html")[0].getAttribute("lang").toString().split("-")[0].toLowerCase()
                 : !!window.location.href.match(/(userreg|signup)/) ? "en" : "n/a";
            var pagePath = window.location.pathname.replace(/\//, "").replaceAll("/", ":");
            var dataLayerObject = {
                "site": {
                    "name": "zebra"
                },
                "page": {
                    "language" : lang,
                    "template" : pageTemplate,
                    "url" : window.location.href,
                    "name" : pagePath
                },
                "events" : {
                    "pageView" : true
                }
            }
            if (pagePath.includes("sitesearch")) {
                searchResultsPage(dataLayerObject);
            }
            _trackData(dataLayerObject);
        }  else {
            console.log("Adobe Launch not available")
        }
    });

    function searchResultsPage(dataSet) {
        dataSet.events.search = true;
        dataSet.search = {};
        dataSet.search.keyword = $(".search-input-container .search-query").val().toLowerCase();
        dataSet.search.resultCount = $('.searchResults-container').find('li').length;
        dataSet.search.location = "sitesearch";
        dataSet.search.type = 'user_input';

        return dataSet;
    }
});
/*

    FILE: browser.js
    DESCRIPTION: Browser and File locations
    AUTHOR(S): Jesse Weed, Nick Katarow

    TO DO:

*/

var Zebra = window.Zebra || {};

Zebra.Browser = {


  /* - - - - - - - - - - - - - - - - - >

        CONFIGURATION & INITILIZATION

    < - - - - - - - - - - - - - - - - - */


  config: { // CONFIG SETTINGS FOR BROWSER

    mobilePX: 768, // andthing under this size is considered "mobile-ish"
    tabletPX: 971 // andthing under this size is considered "tablet-ish"

  }, // END: INIT


  init: function() { // INITIALIZE BROWSER

    var self = this;

    Zebra.logFunction('Zebra.Browser.init()');

  }, // END: INIT



  /* - - - - - - - - - - - - - - - - - >

        MODULE FUNCTIONS

  < - - - - - - - - - - - - - - - - - */


  info: function(which) { // GET BASIC BROWSER INFO

    Zebra.logFunction('Zebra.Browser.info()');

    var self = this;

    var ua = navigator.userAgent.toLowerCase(),
      platform = navigator.platform.toLowerCase(),
      UA = ua.match(/(opera|ie|firefox|chrome|version)[\s\/:]([\w\d\.]+)?.*?(safari|version[\s\/:]([\w\d\.]+)|$)/) || [null, 'unknown', 0],
      mode = UA[1] == 'ie' && document.documentMode;

    if (which === 'name') {
      return (UA[1] == 'version') ? UA[3] : UA[1];
    } else if (which === 'version') {
      return mode || parseFloat((UA[1] == 'opera' && UA[4]) ? UA[4] : UA[2]);
    }

  }, // END: INFO


  domain: function() { // GET CURRENT DOMAIN NAME

    Zebra.logFunction('Zebra.Browser.domain()');

    var self = this;

    return window.location.hostname;

  }, // END: DOMAIN


  forward: function(url, time) { // REDIRECT TO SPECIFIC URL

    Zebra.logFunction('Zebra.Browser.forward()');

    var self = this;

    // DELAY REDIRECT IF REQUESTED
    if (typeof time !== 'undefined') {
      setTimeout(

        function() {
          if (url !== false) {
            location.href = url;
          }
        },
        time * 1000);

      // OTHERWISE REDIRECT IMMEDIATELY
    } else {
      if (url !== false) {
        window.location = url;
      }
    }

  }, // END: FORWARD


  go: function(url) { // GO TO A SPECIFIC URL

    Zebra.logFunction('Zebra.Browser.go()');

    var self = this;

    window.location.href = url;

  }, // END: GO

  isMobile: function() { // DETERMINE IF DEVICE IS MOBILE-ISH SIZE

    var self = this;

    if (self.width() <= self.config.mobilePX) {
      return true;
    } else {
      return false;
    }

  },


  isTablet: function() { // DETERMINE IS DEVICE IS TABLET-ISH SIZE

    Zebra.logFunction('Zebra.Browser.isTablet()');

    var self = this;

    if (self.width() <= self.config.tabletPX) {
      return true;
    } else {
      return false;
    }

  },


  page: function() { // RETURN CURRENT PAGE NAME

    Zebra.logFunction('Zebra.Browser.page()');

    var self = this;

    var path = location.pathname.split('/');

    return path.slice(-1)[0];

  }, // END: PAGE


  path: function() { // RETURN CURRENT PATH

    Zebra.logFunction('Zebra.Browser.path()');

    return location.pathname;

  }, // END: PATH


  query: function(term) { // QUERY URI FOR A 'GET' PARAM

    Zebra.logFunction('Zebra.Browser.query()');

    var data = false,
        loc = location.search,
        q = loc.split('?'),
        query = '&' + q[1],
        parts = query.split('&');

    $.each(parts, function(index, value) {

      if (value.indexOf(term) !== -1) {
        data = value.split('=');
        data = data[1];
      }

    });

    return data;

  }, // END: QUERY


  segment: function(num) { // RETURN SPECIFIC URL SEGMENT

    Zebra.logFunction('Zebra.Browser.segment()');

    var self = this;

    var path = location.pathname.split('/');

    return path[num];

  }, // END: PATH


  url: function() { // GET CURRENT URL

    Zebra.logFunction('Zebra.Browser.url()');

    var self = this;

    return window.location.protocol + '//' + window.location.hostname + (window.location.port !== '' ? ':' + window.location.port : '') + '/'; //BASE URL

  },


  width: function() { // GET WIDTH OF BROWSER WINDOW

    Zebra.logFunction('Zebra.Browser.width()');

    var self = this;

    // Brute force due to lack of API robust-ness
    function bruteForce() {
      console.warn('Using bruteForce!');

      var i = 0,
        found = false;

      while (!found) {
        if (matchMedia('(width: ' + i + 'px)').matches) {
          found = true;
        } else {
          i++;
        }

        // Prevent infinite loop if something goes horribly wrong
        if (i === 9999) {
          if (typeof console !== 'undefined' && typeof console.warn !== 'undefined') {
            console.warn('bruteForce failed');
          }

          break;
        }
      }

      return i;
    }

    // Try standard DOM width methods and check them agaZebrat "matchMedia" to ensure consistency with media queries
    // matchMedia("only all").matches tests to see if media queries are actually supported (in case matchMedia is actually a polyfill)
    if (typeof matchMedia !== 'undefined' && matchMedia('only all').matches) {
      if (matchMedia('(width: ' + window.innerWidth + 'px)').matches) {
        return window.innerWidth;
      } else if (matchMedia('(width: ' + document.documentElement.clientWidth + 'px)').matches) {
        return document.documentElement.clientWidth;
      } else {
        return bruteForce();
      }
    } else {
      // Depend solely on unchecked widths for non "matchMedia" enabled browsers (Probably just IE)
      // Consistency with CSS media queries is NOT guaranteed, but they probably don't exist anyway.
      return document.documentElement.clientWidth || window.innerWidth;
    }
  }

};


// END FILE: Zebra.Browser

/*

    FILE: log.js
    DESCRIPTION: Misc logging methods
    AUTHOR(S): Jesse Weed

*/


//  LOGGING

Zebra.error = function (what) {  // LOG AN ERROR TO THE CONSOLE

    var self = this;

    if (typeof console !== 'undefined' && self.config.debug === true ) {
        console.error(what);
    } else if (self.config.debug === true) {
        window.console = {error: function () {}};
    }

};


Zebra.info = function (what) {  // LOG SOME INFO TO THE CONSOLE

    var self = this;

    if (typeof console !== 'undefined' && self.config.debug === true ) {
        console.info(what);
    } else if (self.config.debug === true) {
        window.console = {info: function () {}};
    }

};

Zebra.log = function (what) {  // LOG TO CONSOLE IF CONSOLE EXISTS && DEBUG === TRUE

    var self = this;

    if (typeof console !== 'undefined' && self.config.debug === true ) {
        console.log(what);
    } else if (self.config.debug === true) {
        window.console = {log: function () {}};
    }

}; // END: LOG


Zebra.logFunction = function (what) {  // LOG FUNCTION INFO TO CONSOLE

    var self = this;

    if (typeof console !== 'undefined' && self.config.debug === true ) {
        console.info('Function call: ' + what);
    } else if (self.config.debug === true) {
        window.console = {log: function () {}};
    }

}; // END: LOG


Zebra.warn = function (what) {  // LOG A WARNING TO THE CONSOLE

    var self = this;

    if (typeof console !== 'undefined' && self.config.debug === true ) {
        console.warn(what);
    } else if (self.config.debug === true) {
        window.console = {warn: function () {}};
    }

};
if (typeof console == 'undefined' ) {
    window.console = {
        warn: function () {},
        info: function () {},
        log: function () {}
    }
}
// END FILE: Zebra.Log

/*

    FILE: storage.js
    DESCRIPTION: Local storage & cookies
    AUTHOR(S): Jesse Weed

*/

var Zebra = window.Zebra || {};

Zebra.Storage = {


  /* - - - - - - - - - - - - - - - - - >

        CONFIGURATION & INITILIZATION

    < - - - - - - - - - - - - - - - - - */

  config: { // STORAGE CONFIG SETTINGS

    method: 'set',
    name: null,
    value: null,
    isAvailable: false,
    dualMode: true, // use both local storage and cookies
    expiration: '1 day' // when to expire the fallback cookie

  }, // END: CONFIG


  init: function() { // INITIALIZE STORAGE

    Zebra.logFunction('Zebra.Storage.init()');

    var self = this;

    self.check();


  }, // END: INIT



  /* - - - - - - - - - - - - - - - - - >

        MODULE FUNCTIONS

    < - - - - - - - - - - - - - - - - - */

  cookieDispose: function(name) { // REMOVE COOKIE

    Zebra.logFunction('Zebra.Storage.cookieDispose()');

    var exdate = new Date(),
      value = '',
      expire = 3;

    exdate.setDate(exdate.getDate() - expire);
    value = escape(value) + ((expire == null) ? "" : "; expires=" + exdate.toUTCString());
    document.cookie = name + "=" + value;

  }, // END: COOKIE DISPOSE


  cookieRead: function(name) { // GET COOKIE DATA

    Zebra.logFunction('Zebra.Storage.cookieRead()');

    var value = "";
    var search = name + "=";

    if (document.cookie.length > 0) {
      offset = document.cookie.indexOf(search);

      if (offset != -1) {
        offset += search.length;
        end = document.cookie.indexOf(";", offset);
        if (end == -1) end = document.cookie.length;
        value = unescape(document.cookie.substring(offset, end));
      }
    }

    return value;

  }, // END: COOKIEREAD


  cookieWrite: function(name, value, expiration) { // CREATE A COOKIE

    Zebra.logFunction('Zebra.Storage.cookieWrite()');

    var expire = '';

    if (typeof expiration !== undefined) {

      expiration = expiration.toLowerCase();
      var time = expiration.split(" ")[0];

      // Set expiration in days or hours
      if (expiration.indexOf('hours') > 0 || expiration.indexOf('hrs') > 0 ||
        expiration.indexOf('hour') > 0 || expiration.indexOf('hr') > 0) {
        expire = new Date((new Date()).getTime() + time * 3600000);
      } else if (expiration.indexOf('days') > 0 || expiration.indexOf('day') > 0) {
        expire = new Date((new Date()).getTime() + time * 3600000 * 24);
      }

      expire = "; expires=" + expire.toGMTString();
      document.cookie = name + "=" + escape(value) + expire + ';path=/';

    }

  }, // END: COOKIEWRITE


  check: function(name) { // CHECK IF LOCAL STORAGE IS AVAILABLE

    Zebra.logFunction('Zebra.Storage.check()');

    var self = this;
    if (typeof window.localStorage !== "undefined") {
      if (localStorage.getItem('storageTest')) {
        self.config.isAvailable = true;
        Zebra.info('Local storage is available.');
        return true;
      } else {
        localStorage.setItem('storageTest', true);

        if (localStorage.getItem('storageTest')) {
          self.config.isAvailable = true;
          localStorage.removeItem('storageTest');
          Zebra.info('Local storage is available.');
          return true;
        } else {
          Zebra.warn('Local storage is not available. Falling back to cookies.');
          self.config.isAvailable = false;
          return false;
        }
      }
    }
  }, // END: check


  clear: function() { // CLEAR LOCAL STORAGE

    Zebra.logFunction('Zebra.Storage.clear()');

    var self = this;

    if (self.config.isAvailable === true) localStorage.clear();

    Zebra.log('clear local storage');

  }, // END: clear


  get: function(name) { // GET VALUE OF STORED ITEM

    Zebra.logFunction('Zebra.Storage.get()');

    var self = this;

    if (self.config.isAvailable === true) {
      return localStorage.getItem(name);
    } else {
      return self.cookieRead(name);
    }

  }, // END: get

  remove: function(name) { // REMOVE STORED ITEM

    Zebra.logFunction('Zebra.Storage.remove()');

    var self = this;

    if (self.config.isAvailable === true) {
      localStorage.removeItem(name);
      if (self.config.dualMode === true) self.cookieDispose(name);
    } else {
      self.cookieDispose(name);
    }

  }, // END: STORAGE REMOVE

  set: function(name, value) { // ADD ITEM TO LOCAL STORAGE

    Zebra.logFunction('Zebra.Storage.set()');

    var self = this;

    if (self.config.isAvailable === true) {
      localStorage.setItem(name, value);
      if (self.config.dualMode === true) self.cookieWrite(name, value, self.config.expiration);
    } else {
      self.cookieWrite(name, value, self.config.expiration);
    }

  } // END: STORAGE SET

};

// END FILE: Zebra.Storage

/*

FILE: utility.js
DESCRIPTION: Misc utility methods
AUTHOR(S): Jesse Weed

*/

var Zebra = window.Zebra || {};

Zebra.Utility = {


	/* - - - - - - - - - - - - - - - - - >

	CONFIGURATION & INITILIZATION

	< - - - - - - - - - - - - - - - - - */


	init: function() { // INITIALIZE UTILITY

		Zebra.logFunction('Zebra.Utility.init()');

		var self = this;

        function resizeShadedBox() {
            if( window.innerWidth >= 800 ) {
                $('.row').each(function() {
                    self.equalheight($(this).find('.shaded-box-container'));
                });
            }
        };

		if( !$('body').hasClass('cq-wcm-edit') ) {
		    resizeShadedBox();
		    $(window).on("load resize", resizeShadedBox);
		}

		$(document).ready(function() {
			$('table').each(function() {
				$(this).find('td,th').each(function() {
					var valign = $(this).attr('valign');
					if( valign === 'middle' ) {
						$(this).css('vertical-align', 'middle');
					}else if( valign === 'top' ) {
						$(this).css('vertical-align', 'top');
					}else if( valign === 'bottom' ) {
						$(this).css('vertical-align', 'bottom');
					}
				});
			});
		});



	}, // END: INIT


	/* - - - - - - - - - - - - - - - - - >

	MODULE FUNCTIONS

	< - - - - - - - - - - - - - - - - - */

	arrayUnique: function(array) { // STRIP ARRAY OF DUPLICATE VALUES

		Zebra.logFunction('Zebra.Utility.arrayUnique()');

		if (Array.prototype.filter) { // Use array filter if it's available
			return array.filter(function(el, index, arr) {
				return index === arr.indexOf(el);
			});
		} else { // Otherwise use jquery
			return $.grep(array, function(v, k) {
				return $.inArray(v, array) === k;
			});
		}

	}, // END: arrayUnique()


	clickAway: function( elements, callback ) { // DO SOMETHING WHEN CLICK OUTSIDE OF ELEMENT(S)

		$('body').on('click', {
			elements: elements,
			callback: callback
		}, Zebra.Utility.clickEvent);

	}, // END: clickAway()


	clickEvent : function( e ) { // EVENT TO FIRE ON CLICK AWAY

		var targets = [], parents = [];

		// CHECK IF TARGET OR PARENT HAS PROVIDED CLASS(ES)
		$.each(e.data.elements, function(key, value) {
			targets.push(!$(e.target).hasClass(value));
			parents.push($(e.target).parents().hasClass(value));
		});

		// INVOKE CALLBACK IF TARGET IS OUTSIDE OF PROVIDED CLASS(ES)
		if ( targets.indexOf(false) < 0  && parents.indexOf(true) < 0  ) {
			e.data.callback();
			$('body').off('click', Zebra.Utility.clickEvent);
		}

	}, // END: clickEvent()


	isNumber: function(n) { // DETRMINE IF GIVER VALUE IS NUMERIC
		Zebra.logFunction('Zebra.Utility.isNumber()');
		return !isNaN(parseFloat(n)) && isFinite(n);
	}, // END: isNumber()


	scrollTo: function(where) { // SCROLL TO SPECIFIC ELEMENT

		Zebra.logFunction('Zebra.Utility.scrollTo()');

		var offset = 53; // if you have fixed navigation or other elements that are affecting to scroll position, you can add a buffer here to accommodate for it.
		if( $('body').hasClass('sticky') || $('body').hasClass('campaign') ) {
			offset = 83;
			if( $('body').hasClass('has-secondary-nav') ) {
				offset = 141;
			}
		}

		if ($('#' + where).length > 0) {
			$('html, body').animate({
				scrollTop: $('#' + where).offset().top - offset
			}, 500);
		} else {
			$('html, body').animate({
				scrollTop: $(where).offset().top - offset
			}, 500);
		}

	}, // END: scrollTo()

	titleCase: function(str) { // APPLY TITLE CASING TO A STRING

		Zebra.logFunction('Zebra.Utility.titleCase()');

		return str.replace(/\w\S*/g, function(txt) {
			return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
		});

	}, // END: titleCase()

	equalheight: function($container){

		var currentTallest = 0,
			currentRowStart = 0,
			rowDivs = new Array(),
			$el,
			topPosition = 0;

		$container.each(function() {

			$el = $(this);
			$($el).height('auto')
			topPostion = $el.position().top;

			if (currentRowStart != topPostion) {
				for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) {
					rowDivs[currentDiv].height(currentTallest);
				}
				rowDivs.length = 0; // empty the array
				currentRowStart = topPostion;
				currentTallest = $el.height();
				rowDivs.push($el);
			} else {
				rowDivs.push($el);
				currentTallest = (currentTallest < $el.height()) ? ($el.height()) : (currentTallest);
			}
			for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) {
				rowDivs[currentDiv].height(currentTallest);
			}
		});
	}

};


// END FILE: Zebra.Utility

/*

		FILE: search.js
		DESCRIPTION: Pramary site navigation
		AUTHOR(S): Jesse Weed

*/

var Zebra = window.Zebra || {};

Zebra.Search = {
	headerConfig: {},
	resultConfig: {},

	/* - - - - - - - - - - - - - - - - - >

				CONFIGURATION & INITILIZATION

		< - - - - - - - - - - - - - - - - - */

	init: function() { // INITIALIZE NAVIGATION

		var self = this;

		self.bind();

	}, // END: INIT

	bind: function() {

		var self = this;

		$(self.html.button).click(function() {
			self.searchToggle();
		});
	},


	// HTML ELEMENTS
	html: {
		button: '.search-icon',
		chat: '.chat-wrapper',
		close: '.search-close',
		footer: 'footer',
		header: 'header',
		input: '#search',
		logo: '.logo',
		menu: '.menu-icon',
		wrapper: '#search-wrapper'
	},

	pos: {
		top: 60
	},

	isOpen: false,


	/* - - - - - - - - - - - - - - - - - >

				MODULE FUNCTIONS

	< - - - - - - - - - - - - - - - - - */


	// HIDE SEARCH INPUT
	searchHide : function() {

		Zebra.logFunction('Zebra.Search.searchHide()');

		var self = this;

		self.isOpen = false;

		self.hideResults();

	}, // END:


	// SHOW SEARCH INPUT
	searchShow : function() {

		Zebra.logFunction('Zebra.Search.searchShow()');

		var self = this;

		// $(self.html.header).addClass('blur');
		// $(self.html.chat).addClass('blur');

		// $(self.html.wrapper).css({
			// 'top' : 0,
			// 'width' : '100%'
		// });

		$(self.html.input).focus();

		$(self.html.input).blur(function() {

			self.searchHide();

		});

		$('.search-quicklist').click(function() {

			self.searchHide();
			self.hideResults();

		});

		$(self.html.input).keyup(function() {
			self.showResults();
		});

		self.isOpen = true;


	}, // END:


	// TOGGLE SEARCH DISPLAY
	searchToggle : function() {

		Zebra.logFunction('Zebra.Search.searchToggle()');

		var self = this;

		if ( $(self.html.input).css('opacity') === '0' ) {
			self.searchShow();
		} else {
			self.searchHide();

		}


	}, // END:


	// SHOW SEARCH RESULT LIST
	showResults : function() {

		Zebra.logFunction('Zebra.Search.showResults()');

		var self = this;

			// $('.content').addClass('blur');
			// $('footer').addClass('blur');

			if ( $(self.html.input).val() !== '' ) $('.search-quicklist li:first-child').html($(self.html.input).val());

			$('.search-quicklist').animate({
				'opacity': 1
			}, function() {
				$('.search-quicklist').css('display', 'block');
			});


	},

	// HIDE SEARCH RESULT LIST
	hideResults : function() {
		Zebra.logFunction('Zebra.Search.hideResults()');

		var self = this;
		// $('.content').removeClass('blur');
		// $('footer').removeClass('blur');
		$('.search-quicklist').animate({
			'opacity': 0
		}, function() {
			$('.search-quicklist').css('display', 'none');
		});
	}

};


// END FILE: Zebra.Search

/*

    FILE: social.js
    DESCRIPTION: Zebra Social feed
    AUTHOR(S): Emily Painter

*/

var Zebra = window.Zebra || {};

Zebra.Social = {

  /* - - - - - - - - - - - - - - - - - >

        CONFIGURATION & INITILIZATION

    < - - - - - - - - - - - - - - - - - */

  init: function() { // INITIALIZE SOCIAL FEED

    var self = this;


    $('.social figure').click(function() {

      $('.social figure').removeClass('active');

      $(this).addClass('active');

    });

  }, // END: INIT


  /* - - - - - - - - - - - - - - - - - >

        MODULE FUNCTIONS

  < - - - - - - - - - - - - - - - - - */


};
// END FILE: Zebra.social

var Zebra = window.Zebra || {};

Zebra.Dialogs = {

  init : function() {
    $("body").on("click", ".toggle-component-ids", function() {
      $(".component-id").toggle();
    });
  },

  getFieldElement : function(field) {
    return $("#x-form-el-" + field.getId());
  },

  hideField : function(field) {
    this.getFieldElement(field).parent().hide();
  },

  showField : function(field) {
    this.getFieldElement(field).parent().show();
  }

};

/*

	FILE: form.js
	DESCRIPTION: Form utilities
	AUTHOR(S): Jesse Weed

*/

var Zebra = window.Zebra || {};
var zebralib = {};

Zebra.Form = {


	/* - - - - - - - - - - - - - - - - - >

		CONFIGURATION & INITILIZATION

	< - - - - - - - - - - - - - - - - - */

	init: function() { // INITIALIZE UTILITY

		Zebra.logFunction('Zebra.Form.init()');
		$('form').find('select').selectBox();
		var self = this;

	}, // END: INIT


	/* - - - - - - - - - - - - - - - - - >

		MODULE FUNCTIONS

	< - - - - - - - - - - - - - - - - - */


	submit: function(id, action, callback) { // HANDLE FORM SUBMISSIONS

		Zebra.logFunction('Zebra.Form.submit()');

		var form = document.getElementById(id);

		// If action is not set, use default
		if (typeof action === 'undefined') {
			form.attr('action');
		}else {
			form.attr('action', action);
		}

		// allow for optional callback if needed
		if (typeof callback !== 'undefined') {
			callback(id, action);
		}

		Zebra.log('submitting form');
		form.submit();
		Zebra.log('form submitted');

	} // END: SUBMITFORM

};

zebralib.filterDropdown = {
	filter : function(elementName , dependentElementName) {
		if (dependentElementName==null || dependentElementName==undefined || dependentElementName.length ==0) {
			return;
		}
		var selectTarget = jQuery('select[name='+elementName+']');
		dependentValue = jQuery('select[name='+dependentElementName+']').val();
		var shown = 0;
		jQuery('select[name='+elementName+'] option').each( function() {
			var thisVal = jQuery(this).attr('value');
			var elementDefaultVal = (!thisVal || thisVal==null || thisVal==undefined || thisVal == "" ||thisVal == " " );
			var dependentDefaultVal = (dependentValue === "" ||dependentValue === " " );
			var dependentValSelected = false;

			for (var i=1; true ;i++) {
				var depVal = jQuery(this).data("dependent-value"+i);
				if(depVal && depVal.length > 0) {
					if (depVal === dependentValue) {
						dependentValSelected=true;
						break;
					}
				} else {
					//we've reached the end of defined dependent values for this option
					break;
				}
			}

			if ( elementDefaultVal || ( !dependentDefaultVal && dependentValSelected ) ) {
				jQuery(this).removeClass('hidden');
				if (!elementDefaultVal){
					shown++;
				}
			} else {
				jQuery(this).addClass('hidden');
			}

		});
		//update selectbox
		selectTarget.selectBox('options' , selectTarget.html());
		//enable or disable based on whether or not any options exist.
		//do the same for selectbox
		if (shown > 0 ) {
			selectTarget.removeAttr("disabled");
			selectTarget.selectBox('enable');
		} else {
			selectTarget.attr("disabled", "disabled");
			selectTarget.selectBox('disable');
		}
		selectTarget.change();
	}
};
zebralib.formElement = {
	changeInputByCountrydropdown : function($ , elementName , countryDrop, anyCountryName) {
		var newCountry = countryDrop.val(),
			targetElement = $('input[name="'+elementName+'"]');

		if (!targetElement.length) {
			targetElement = $('textarea[name="'+elementName+'"]');
		}

		var json = targetElement.data('country-dynamic-values'),
			country = json[newCountry],
			anyCountry = json[anyCountryName];

		if (country == undefined) {
			country = json[anyCountryName];
		}
		if (country!=undefined) {
			var hide = country.hide;
			if (hide==null || hide.length < 1) {
				hide = anyCountry.hide;
			}
			var value = country.newValue;
			if (value==null || value.length < 1) {
				value = anyCountry.newValue;
			}
			var required = country.required;
			if (required==null || required.length < 1) {
				required = anyCountry.required;
			}
			if (required==null || required.length < 1) {
				//no required configs at all, use whatever the author orginally gave
				required = targetElement.data('authored-required');
			}
			var targetShowHide;
			var parentSection = targetElement.closest('.section');
			if (parentSection!=undefined && parentSection !=null) {
				targetShowHide = parentSection;
			} else {
				targetShowHide = targetElement;
			}
			if (hide == "show") {
				targetShowHide.show();
			}
			if (hide == "hide") {
				targetShowHide.hide();
			}
			if (value!=undefined && value.length > 0) {
				targetElement.val(value);
			}
			if (required == "yes" || required == true|| required =='true') {
				zebralib.formElement.drawRequired($ , targetElement , true);
				zebralib.formElement.setRequired($ , targetElement , true);
			} else {
				zebralib.formElement.drawRequired($ , targetElement , false);
				zebralib.formElement.setRequired($ , targetElement , false);
			}
		}
	},
	changeSelectByCountrydropdown : function($ , elementName , countryDrop, anyCountryName) {
		var newCountry = countryDrop.val();
		var targetElement = $('select[name="'+elementName+'"]');
		var json = targetElement.data('country-dynamic-values');
		var country = json[newCountry];
		var anyCountry = json[anyCountryName];
		if (country == undefined) {
			country = json[anyCountryName];
		}
		if (country!=undefined) {
			var hide = country.hide;
			if (hide==null || hide.length < 1) {
				hide = anyCountry.hide;
			}
			var value = country.newValue;
			if (value==null || value.length < 1) {
				value = anyCountry.newValue;
			}
			var required = country.required;
			if (required==null || required.length < 1) {
				required = anyCountry.required;
			}
			if (required==null || required.length < 1) {
				//no required configs at all, use whatever the author orginally gave
				required = targetElement.data('authored-required');
			}
			var targetShowHide;
			var parentSection = targetElement.closest('.section');
			if (parentSection!=undefined && parentSection !=null) {
				targetShowHide = parentSection;
			} else {
				targetShowHide = targetElement;
			}
			if (hide == "show") {
				targetShowHide.show();
			}
			if (hide == "hide") {
				targetShowHide.hide();
			}
			if (required == "yes" || required == true|| required =='true') {
				zebralib.formElement.drawRequired($ , targetElement , true);
				zebralib.formElement.setRequired($ , targetElement , true);
			} else {
				zebralib.formElement.drawRequired($ , targetElement, false);
				zebralib.formElement.setRequired($ , targetElement , false);
			}
		//value changing not supported for select menu - use the filtering capability to accomplish this
		//            if (value!=undefined && value.length > 0) {
		//                targetElement.val(value);
		//            }
		}
	} ,
	changeCheckboxByCountrydropdown : function($ , elementName , countryDrop, anyCountryName) {
		var newCountry = countryDrop.val(),
			targetElements = $('input[name="'+elementName+'"]'),
			targetElement = targetElements.first(),
			json = targetElement.closest('.form_row').data('country-dynamic-values'),
			country = json[newCountry],
			anyCountry = json[anyCountryName];
		if (country == undefined) {
			country = json[anyCountryName];
		}
		if (country!=undefined) {
			var hide = country.hide;
			if (hide==null || hide.length < 1) {
				hide = anyCountry.hide;
			}
			var value = country.newValue;
			if (value==null || value.length < 1) {
				value = anyCountry.newValue;
			}
			var required = country.required;
			if (required==null || required.length < 1) {
				required = anyCountry.required;
			}
			if (required==null || required.length < 1) {
				//no required configs at all, use whatever the author orginally gave
				required = targetElement.closest('.form_row').data('authored-required');
			}
			var targetShowHide;
			var parentSection = targetElements.first().closest('.section');
			if (parentSection!=undefined && parentSection !=null) {
				targetShowHide = parentSection;
			} else {
				targetShowHide = targetElements;
			}
			if (hide == "show") {
				targetShowHide.show();
			}
			if (hide == "hide") {
				targetShowHide.hide();
			}
			if (required == "yes" || required == true|| required =='true') {
				zebralib.formElement.drawRequired($ , targetElement , true , true);
				zebralib.formElement.setRequired($ , targetElement.closest('.form_row') , true);
			} else {
				zebralib.formElement.drawRequired($ , targetElement , false , true);
				zebralib.formElement.setRequired($ , targetElement.closest('.form_row') , false);
			}

			//uncheck all values
			targetElements.each(function() {
				$(this).removeAttr('checked');
			});

			//check only those matching a value for the country selected
			if (value!=null && value!= undefined){
				var values = value.split('|');
				if (values!=undefined && values.length > 0) {
					var valuesLen = values.length;
					for (var i = 0; i < valuesLen;i++) {
						targetElements.each(function() {
							if ($(this).val() == values[i]){
								$(this).attr('checked','checked');
							}
						});
					}
				}
			}
		}
	},
	drawRequired : function($ , targetElement, required , isCheckbox) {

		var form_row = targetElement.closest('.form_row');
		if (isCheckbox) {
			form_row = form_row.siblings('.form_row').first();
		}
		var form_leftcol = form_row.find('.form_leftcol:first');
		if (form_leftcol.length> 0 ) {//if length is zero, there is no left col and no reason to draw asterisk
			var form_leftcolmark = form_leftcol.find('.form_leftcolmark');
			if (required) {
				if (form_leftcolmark.length < 1) {
					form_leftcol.append('<div class="form_leftcolmark"> *</div>');
				} else {
					form_leftcolmark.html(' *');
				}
			} else {
				if (form_leftcolmark.length >0) {
					form_leftcolmark.remove();
				}
			}

		}
	},
	setRequired : function($ , targetElement , required) {
		targetElement.data('required' , (required?'yes':'no') );
	}

};

zebralib.roi={

	setInitial : function(){
		timeyearVar = true;
		costyearVar = true;
	},
	clearErrorMessages : function()
	{
        $("#paybackPeriodRequiredErrorMsg").hide();
    	$("#currentCostsRequiredErrorMsg").hide();
    },
	toDecimal : function(num, Digits)
	{
		temp = "";
		//if(!isNaN(num)) return;
		if(Digits > 0)
		{
			n = Math.round(num * Math.pow(10, Digits));
			for(i = 0; i < Digits; i++)
			{
				d = n % 10;
				n = (n - d)/10;
				temp = (d + "") + temp;
			}
			temp = "." + temp;
		}
		else n = num;
		//if you need "," eg: 123,465.78
		while(n > 999)
		{
			temp1 = "";
			for(i = 0; i < 3; i++)
			{
				d = Math.floor(n) % 10;
				n = Math.floor((n - d)/10);
				temp1 = (d + "") + temp1;
			}
			temp = "," + temp1 + temp;
		}
		return n + temp;
	},

	calcSavings : function(form)
	{
        if((!form.labels.value.trim()) || (!form.label_time.value.trim()) || (!form.weeks.value.trim())
            || (!form.hours.value.trim()) || (!form.stores.value.trim()) || (!form.labour_hour.value.trim()))
            {
            	$("#currentCostsRequiredErrorMsg").show();
            	return;
        	}
        $("#currentCostsRequiredErrorMsg").hide();
		if (timeyearVar) {
			//alert('time year');
			var fixed_time = eval(form.labels.value) * eval(form.label_time.value) * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60;
			var mobile_time = eval(form.labels.value) * 0.5 * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60;
		}
		else {
			//alert('time month');
			var fixed_time = eval(form.labels.value) * eval(form.label_time.value) * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60 / 12;
			var mobile_time = eval(form.labels.value) * 0.5 * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60 / 12;
		}
		form.fixed_time.value = zebralib.roi.toDecimal(parseInt(fixed_time, 10), 0) + ' hrs';
		form.mobile_time.value = zebralib.roi.toDecimal(parseInt(mobile_time, 10), 0)  + ' hrs';
		var savings_time = fixed_time - mobile_time;
		form.savings_time.value = zebralib.roi.toDecimal(parseInt(savings_time, 10), 0) + ' hrs';
		if (costyearVar) {
			//alert('cost year')
			var fixed_time = eval(form.labels.value) * eval(form.label_time.value) * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60;
			var mobile_time = eval(form.labels.value) * 0.5 * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60;
			var fixed_cost = eval(form.labour_hour.value) * fixed_time;
			var mobile_cost = eval(form.labour_hour.value) * mobile_time;
		}
		else {
			//alert('cost month')
			var fixed_time = eval(form.labels.value) * eval(form.label_time.value) * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60 / 12;
			var mobile_time = eval(form.labels.value) * 0.5 * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60 / 12;
			var fixed_cost = eval(form.labour_hour.value) * fixed_time;
			var mobile_cost = eval(form.labour_hour.value) * mobile_time;
		}
		form.fixed_cost.value = form.units.value + ' ' + zebralib.roi.toDecimal(parseInt(fixed_cost, 10), 2);
		form.mobile_cost.value = form.units.value + ' ' + zebralib.roi.toDecimal(parseInt(mobile_cost, 10), 2);
		var savings_cost = fixed_cost - mobile_cost;
		form.savings_cost.value = form.units.value + ' ' + zebralib.roi.toDecimal(parseInt(savings_cost, 10), 2);
		if(form.cost_printer != null && form.cost_printer.value > 0){
			var printer_cost = eval(form.cost_printer.value) * eval(form.printers_store.value) * eval(form.stores.value);
			form.printer_cost.value = form.units.value + ' ' + zebralib.roi.toDecimal(parseInt(printer_cost, 10), 2);
		}
		zebralib.roi.reColor(form);
	},

	calcPayback : function(form) {
		if((!form.labels.value.trim()) || (!form.label_time.value.trim()) || (!form.weeks.value.trim()) ||
            (!form.hours.value.trim()) || (!form.stores.value.trim()) || (!form.labour_hour.value.trim()) ||
            (!form.cost_printer.value.trim()) || (!form.printers_store.value.trim()))
            {
            	$("#paybackPeriodRequiredErrorMsg").show();
            	return;
        	}
        $("#paybackPeriodRequiredErrorMsg").hide();
		var fixed_time = eval(form.labels.value) * eval(form.label_time.value) * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60;
		var mobile_time = eval(form.labels.value) * 0.5 * eval(form.weeks.value) * eval(form.hours.value) * eval(form.stores.value) / 60;
		var fixed_cost = eval(form.labour_hour.value) * fixed_time;
		var mobile_cost = eval(form.labour_hour.value) * mobile_time;
		var savings_cost = fixed_cost - mobile_cost;
		var savings_month = savings_cost/12;
		var printer_cost = eval(form.cost_printer.value) * eval(form.printers_store.value) * eval(form.stores.value);
		var payback_period = printer_cost/savings_month;
		form.payback_period.value = zebralib.roi.toDecimal(Math.round(payback_period), 0);
	},

	changeCurrency : function(form)
	{
		form.units2.selectedIndex = form.units.selectedIndex;
		if (form.savings_time.value) {
			form.fixed_cost.value = form.units.value + form.fixed_cost.value.substring(1, form.fixed_cost.value.length);
			form.mobile_cost.value = form.units.value + form.mobile_cost.value.substring(1, form.mobile_cost.value.length);
			form.savings_cost.value = form.units.value + form.savings_cost.value.substring(1, form.savings_cost.value.length);
		}
		if (form.printer_cost.value) {
			form.printer_cost.value = form.units.value + form.printer_cost.value.substring(1, form.printer_cost.value.length);
		}
	},

	changeCurrency2 : function (form) {
		form.units.selectedIndex=form.units2.selectedIndex;
		zebralib.roi.changeCurrency(form);
	},
	reColor : function (form) {
		var timeyearelement=document.getElementById('timeyear');
		var costyearelement=document.getElementById('costyear');
		var timemonthelement=document.getElementById('timemonth');
		var costmonthelement=document.getElementById('costmonth');

		if (timeyearVar) {
			timeyearelement.className='on';
			timemonthelement.className='off';
		}
		else {
			timeyearelement.className='off';
			timemonthelement.className='on';
		}
		if (costyearVar) {
			costyearelement.className='on';
			costmonthelement.className='off';
		}
		else {
			costyearelement.className='off';
			costmonthelement.className='on';
		}
	},
	yearMonth : function (form, savings) {
		//alert(savings);
		switch (savings) {
			case 'time':
				if (timeyearVar) {
					//alert('time: year -> month');
					timeyearVar=false;
					zebralib.roi.calcSavings(form);
				}
				break;
			case 'cost':
				if (costyearVar) {
					//alert('cost: year -> month');
					costyearVar=false;
					zebralib.roi.calcSavings(form);
				}
				break;
		}
	},

	monthYear : function(form, savings) {
		switch (savings) {
			case 'time':
				if (!timeyearVar) {
					//alert('time: month -> year');
					timeyearVar=true;
					zebralib.roi.calcSavings(form);
				}
				break;
			case 'cost':
				if (!costyearVar) {
					//alert('cost month -> year');
					costyearVar=true;
					zebralib.roi.calcSavings(form);
				}
				break;
		}
	}

};

zebralib.roi.printermgmt = {

	setInitial : function(){
		var timeyearVar = true;
		var costyearVar = true;
		var V;
		var Y;
	},

    clearErrorMessages : function() {
         $("#epaybackPeriodRequiredErrorMsg").hide();
		 $("#ecurrentCostsRequiredErrorMsg").hide();
    },
	calcSavings : function(form)
	{
        if((!form.A.value.trim()) || (!form.A.value.trim()) || (!form.B.value.trim()) || (!form.Z.value.trim()) ||
            (!form.C.value.trim()) || (!form.E.value.trim()) || (!form.H.value.trim()) || (!form.F.value.trim()) ||
            (!form.G.value.trim()) || (!form.I.value.trim()) )
            {
            	$("#ecurrentCostsRequiredErrorMsg").show();
            	return;
        	}
        $("#ecurrentCostsRequiredErrorMsg").hide();
		Y = eval(form.A.value) * eval(form.B.value) + eval(form.Z.value);
		form.Y.value = zebralib.roi.toDecimal( Y );
		form.X.value = zebralib.roi.toDecimal( ( eval(form.A.value) - 1 ) * ( eval(form.C.value) * eval(form.E.value) ) );
		var W = ( eval(form.H.value) * ( eval(form.F.value) * eval(form.G.value) )) + ( eval(form.I.value) * ( eval(form.F.value) * eval(form.G.value) ))
		form.W.value = zebralib.roi.toDecimal( W );
		var YS1 = ( eval(form.A.value) - 1 ) * ( eval(form.C.value) * eval(form.E.value) ) + ( eval(W) * 12 )
		var YS2 = eval(W) * 12;
		var YS3 = eval(W) * 12;
		form.YS1.value=zebralib.roi.toDecimal( YS1 );
		form.YS2.value=zebralib.roi.toDecimal( YS2 );
		form.YS3.value=zebralib.roi.toDecimal( YS3 );
		V = YS1 + YS2 + YS3;
		form.V.value = zebralib.roi.toDecimal( V );
		form.VM.value = zebralib.roi.toDecimal( V / 36 );
	},

	calcPayback : function (form)
    {
        if((!form.Y.value.trim()) || (!form.V.value.trim()))
            {
            	$("#epaybackPeriodRequiredErrorMsg").show();
            	return;
        	}
        $("#epaybackPeriodRequiredErrorMsg").hide();
		form.payback_period.value = zebralib.roi.toDecimal( (Y / (V / 36)), 1 );
	}
};

//end button form submit
function onFormSubmitValidation(formSubmitId) {

 for (var i = 0; i < document.forms.length; ++i) {
    form = document.forms[i];
     var arr = document.getElementsByClassName("form_leftcolmark");
	 var executeFromSubmit = false;
     $.each(arr, function(index, value) {
                // checking only for Mandatory fields
                if(value.innerHTML.indexOf("*") != -1 && $(value).is(":visible")) {
                    var test = $(value).closest(".form_row");
                     if($(test).parent().prop('className').indexOf('radio') != -1){
                        var parentRadio = $(value).closest(".section.radio");
                        var tempFlag = false;
                        //looping through each radio button
                        $(parentRadio).find($('input')).each(function(){
                             // at least one of the radio buttons was NOT checked
                            if ($(this).prop("checked")) {
                                tempFlag = true;
                                return false;
                            }
                        });
                        if(!tempFlag) {executeFromSubmit = true;}
                    }
                     // checking only for Mandatory fields for checkbox
         	    else if($(test).parent().prop('className').indexOf('checkbox') != -1){
                       var parentCheckBox = $(value).closest(".checkbox.section");
                        var tempFlag = false;
                        $(parentCheckBox).find($('input')).each(function(){
                             // at least one of the checkbox buttons was  checked
                            if ($(this).prop("checked")) {
                                tempFlag = true;
                                return false;
                            }
                        });
						if(!tempFlag) {executeFromSubmit = true;}
                    }
					//Fetching the parent of the radio buttons in the form
                     else if(!$(test).find(".form_field").val() && !$(test).find(".form_field").prop('disabled')) {
						 if($(test).find(".form_field").val()!=undefined && $(test).find(".form_field").prop('disabled')!=undefined){
							executeFromSubmit=true;
						 }
                    }
                }
            });
    		if(executeFromSubmit) {
               document.forms[formSubmitId].submit();
            }
	}

}


/*For custom text field on submit rearrange the error 
  * Check title to bold
*/

$( document ).ready(function() {

	//For custom text field on submit rearrange the error
     if($('.custom-text-float') != undefined && $('.custom-text-float').length>0 && $('.customTextErrorInfo').find
     ('.form_error').length>1){
        var compsize=$('.custom-text-float').size();
        var tempdata= "";
		var additionalCompPlaceHolder=0;
		var initialCompPlaceHolder=1;
        for(i=0;i<compsize;i++){
		   tempdata= tempdata+ " - "+ $('.customTextErrorInfo').find('.form_error')[additionalCompPlaceHolder].innerText;
		   $('.customTextErrorInfo').find('.form_error')[initialCompPlaceHolder].innerText= $('.customTextErrorInfo').find('.form_error')[initialCompPlaceHolder].innerText + tempdata;

		   additionalCompPlaceHolder=additionalCompPlaceHolder+2;
		   initialCompPlaceHolder=initialCompPlaceHolder+2;
		   tempdata="";
        }
        additionalCompPlaceHolder=0;
        for(i=0;i<compsize;i++){
             $('.customTextErrorInfo')[additionalCompPlaceHolder].remove();
             additionalCompPlaceHolder=additionalCompPlaceHolder+1;
        }
    }
	
    //checkbox font as bold
    $('.customcheckboxlabel').find('span').css('font-weight','bold');

});


// END FILE: Zebra.Form

/*

FILE: form.js
DESCRIPTION: Link utilities
AUTHOR(S): Jesse Weed

*/

var Zebra = window.Zebra || {};

Zebra.Link = {


  /* - - - - - - - - - - - - - - - - - >

  CONFIGURATION & INITILIZATION

  < - - - - - - - - - - - - - - - - - */

  init: function() { // INITIALIZE UTILITY

    Zebra.logFunction('Zebra.Link.init()');

    var self = this;

    self.bind();

  }, // END: INIT


  bind: function() {

    var self = this;

    $('.dropdown-link').on('click', function(e) {
      self.expand(this);
      e.preventDefault();
    });

    $('a').each(function() {

      if ($(this).attr('href') !== undefined) {

        var href = $(this).attr('href');
        var tabHref = $(this).parent().attr('class');
        /*
        this condition is to check if the parent element of anchor tag contains classname "tab-count"
        added below if condition to fix scroll bar jumbling issue when clicked on tabs WEB-7953
    	if(!(tabHref === undefined) && (tabHref.indexOf("tab-count") != -1))
        {
			console.log("inside if condition no tab count");
        }
        */
        if ( href.indexOf('#') === 0 && href !== '#' ) {
           if(!(!(tabHref === undefined) && (tabHref.indexOf("tab-count") != -1)))
           {
        	$(this).click( function() {
            Zebra.Utility.scrollTo( $(this).attr('href').split('#').join('') );

          });
        }

        }

      }


    });
  },


  /* - - - - - - - - - - - - - - - - - >

  MODULE FUNCTIONS

  < - - - - - - - - - - - - - - - - - */


  expand: function( el ) {

    Zebra.logFunction('Zebra.Link.submit()');

    var self = this;

    if ( !$(el).parent().hasClass('open') ) {

      $(el).parent().addClass('open');

      Zebra.Utility.clickAway(['dropdown-link'], function() {
        Zebra.Link.collapse(el);
      });


    } else {
      self.collapse(el);
    }

  }, // END: expand()

  collapse: function(el) {

    var self = this;

    // $(el).css('height', 'auto');
    // $(el).css('margin-bottom', self.closedMenuMargin);
    $(el).parent().removeClass('open');

  }, // END: collapse


};


// END FILE: Zebra.Link

/*
    FILE: collapse.js
    DESCRIPTION: Used to open and close things
*/

var Zebra = window.Zebra || {};

Zebra.Collapse = {
  init: function() { // INITIALIZE UTILITY

    $('.collapsible h3 .arrow').on('click', function() {

        if($(window).width() <= 800) {
          var parent = $(this).parents('.collapsible'),
          container = $(parent).children('.collapsible-content');

          parent.toggleClass('collapsed');
          parent.find('.arrow').toggleClass('icon-down-arrow icon-up-arrow');
        }
    });
  }
};

/*

        FILE: video.js
        DESCRIPTION: Zebra Video Player
        AUTHOR(S): Emily Painter

*/

var Zebra = window.Zebra || {};

Zebra.Video = {
    players: [],

    init: function() { // INITIALIZE VIDEO PLAYER
        var self = this;

        $('.video-js').each(function( index ) {
            videojs(this, {
                preload: 'none',
                techOrder: ['html5', 'flash', 'youtube'],
                html5:!!document.createElement('video').canPlayType?1:0
            },
            function(){
                this.on('play', function(){
                    var player = this;
                    if( $('.carousel').length ) {
                        $(this).closest('.carousel').slick('slickPause');
                    }
                    // text box fades away on play in large screens
                    if ($(window).width() >= 800) {
                        $('.full-video__text-box').fadeOut(250);
                    }

                    $.each(self.players, function(){
                        if( this.id_ !== player.id_ ) {
                            try {
                                this.pause();
                            } catch(e){} // prevent error if video is not supported
                        }
                    });

                    $('.video-js').eq(index).next().addClass('hide');
                    $(this.posterImage.el()).hide();
                });

                this.on('ended', function(){
                    var player = this;
                    if( $('.carousel').length ) {
                        $(this).closest('.carousel').slick('slickPlay');
                    }
                    // text box fades away on play in large screens
                    if ($(window).width() >= 800) {
                        $('.full-video__text-box').fadeIn(250);
                    }

                    $('.video-js').eq(index).next().removeClass('hide');

                    $(this.posterImage.el()).show();
                });
                self.players.push(this);
            });
        });
    }, // END: INIT
    pauseAll: function(){
        $.each(this.players, function(){
            try {
                this.pause();
            } catch(e){} // prevent error if video is not supported
        });
    }
};
// END FILE: Zebra.video

/*

    FILE: backgroundimage.js
    DESCRIPTION: Background Image Component
    AUTHOR(S): Frankie Ramirez

*/

var Zebra = window.Zebra || {};

Zebra.BackgroundImage = {

  /* - - - - - - - - - - - - - - - - - >

        CONFIGURATION & INITILIZATION

    < - - - - - - - - - - - - - - - - - */

    init: function() {

        var self = this;

        if( jQuery('.backgroundimage-container').length ) {
            // if component exists, add body class
            jQuery('body').addClass('bgil');
            // take values from data attributes and apply to element
            self.setProperties();
            //  reapply custom values based on the width of the window
            jQuery(window).resize(function() {
                self.setProperties();
            });
        }
        Zebra.logFunction('Zebra.BackgroundImage.init()');
    }, // END: INIT
    setProperties: function() {
        jQuery('.backgroundimage-container').each(function(i) {
            if( jQuery(window).width() > 800 ) {
                jQuery(this).css({
                    'background-image': 'url(' + jQuery(this).data('d-image') + ')',
                    'height': jQuery(this).data('d-height')
                });
            }else if( jQuery(window).width() > 580 && jQuery(this).data('t-hidden') == true ) {
                jQuery(this).css({
                    'background-image': 'none',
                    'height': jQuery(this).data('t-height')
                });
            }else if( jQuery(window).width() > 580 ) {
                jQuery(this).css({
                    'background-image': 'url(' + jQuery(this).data('t-image') + ')',
                    'height': jQuery(this).data('t-height')
                });
            }else if( jQuery(this).data('m-hidden') == true ) {
                jQuery(this).css({
                    'background-image': 'none',
                    'height': jQuery(this).data('m-height')
                });
            }else {
                jQuery(this).css({
                    'background-image': 'url(' + jQuery(this).data('m-image') + ')',
                    'height': jQuery(this).data('m-height')
                });
            }
        });
    }
};
// END FILE: Zebra.BackgroundImage

/*

FILE: campaignnav.js
DESCRIPTION: Campaign Nav
AUTHOR(S): Frankie Ramirez

*/

var Zebra = window.Zebra || {};

Zebra.CampaignNav = {

	/* - - - - - - - - - - - - - - - - - >

	CONFIGURATION & INITILIZATION

	< - - - - - - - - - - - - - - - - - */

	init: function() { // INITIALIZE UTILITY
		Zebra.logFunction('Zebra.CampaignNav.init()');

		var self = this;

		self.bind();
	}, // END: INIT


	bind: function() {
		var self = this;

		if( $('.campaign-nav').length ) {
			$('body').addClass('campaign');
			$('.campaign-nav').on('click', '.menu-btn', function() {
				$(this).toggleClass('open').parent().prev().toggleClass('open');
				return false;
			});

			$(window).on('resize', self.fixContentTopMargin);

			self.fixContentTopMargin();
		}
	},

	fixContentTopMargin: function() {
		if( window.innerWidth > 898 ) {
			var headerHeight = $('.campaign-nav').height();
			$('#main-content').css('marginTop', headerHeight);
		}
	}
};

// END FILE: Zebra.CampaignNav

Zebra.Dialogs.CallToAction = {

  fields : {
    dropdownLinks : "./dropdownLinks",
    href : "./href",
    openNewTab : "./openNewTab",
    zebraTestedProductFamily : "./zebraTestedProductFamily",
	zebraTestedProduct : "./zebraTestedProduct",
	verticalValue : "./verticalValue",
	crossVerticalValue : "./crossVerticalValue"

  },

  toggleFields : function(selection) {
      var selectedVal = selection.getValue();


      var dialog = selection.findParentByType("dialogfieldset");

      if (!dialog) {
        dialog = selection.findParentByType("dialog");
        var dropdownlinks = dialog.getField(this.fields.dropdownLinks)
        var href = dialog.getField(this.fields.href)
        var openNewTab = dialog.getField(this.fields.openNewTab)
        var zebraTestedProductFamily = dialog.getField(this.fields.zebraTestedProductFamily)
		var zebraTestedProduct = dialog.getField(this.fields.zebraTestedProduct)
		var verticalValue = dialog.getField(this.fields.verticalValue)
		var crossVerticalValue = dialog.getField(this.fields.crossVerticalValue)
      } else {
        var dropdownlinks = dialog.findBy(function(p,c){return(/.*dropdownLinks/.test(p.name));})[0];
        var href = dialog.findBy(function(p,c){return(/.*href/.test(p.name));})[0];
        var openNewTab = dialog.findBy(function(p,c){return(/.*openNewTab/.test(p.name));})[0];
        var zebraTestedProductFamily = dialog.findBy(function(p,c){return(/.*zebraTestedProductFamily/.test(p.name));})[0];
		var zebraTestedProduct = dialog.findBy(function(p,c){return(/.*zebraTestedProduct/.test(p.name));})[0];
		var verticalValue = dialog.findBy(function(p,c){return(/.*verticalValue/.test(p.name));})[0];
		var crossVerticalValue = dialog.findBy(function(p,c){return(/.*crossVerticalValue/.test(p.name));})[0];
      }

      if(/.*Dropdown$/.test(selectedVal)) {
        Zebra.Dialogs.showField(dropdownlinks);
        Zebra.Dialogs.hideField(href);
        Zebra.Dialogs.hideField(openNewTab);
        Zebra.Dialogs.hideField(zebraTestedProductFamily);
		Zebra.Dialogs.hideField(zebraTestedProduct);
		Zebra.Dialogs.hideField(verticalValue);
		Zebra.Dialogs.hideField(crossVerticalValue);
      } else if(/.*prodLink$/.test(selectedVal)) {
        Zebra.Dialogs.hideField(dropdownlinks);
        Zebra.Dialogs.showField(href);
        Zebra.Dialogs.showField(openNewTab);
		Zebra.Dialogs.showField(zebraTestedProductFamily);
		Zebra.Dialogs.showField(zebraTestedProduct);
		Zebra.Dialogs.showField(verticalValue);
		Zebra.Dialogs.showField(crossVerticalValue);
      } else if(/.*solLink$/.test(selectedVal)) {
        Zebra.Dialogs.hideField(dropdownlinks);
        Zebra.Dialogs.showField(href);
        Zebra.Dialogs.showField(openNewTab);
		Zebra.Dialogs.hideField(zebraTestedProductFamily);
		Zebra.Dialogs.hideField(zebraTestedProduct);
		Zebra.Dialogs.showField(verticalValue);
		Zebra.Dialogs.showField(crossVerticalValue);
      } else {
        Zebra.Dialogs.hideField(dropdownlinks);
        Zebra.Dialogs.showField(href);
        Zebra.Dialogs.showField(openNewTab);
        Zebra.Dialogs.hideField(zebraTestedProductFamily);
		Zebra.Dialogs.hideField(zebraTestedProduct);
		Zebra.Dialogs.hideField(verticalValue);
		Zebra.Dialogs.hideField(crossVerticalValue);
      }
  },

  validateButtonLink : function(value) {
        // If the link is from the DAM then make sure it is not a folder/directory
        if(  /^\/content\/dam\//.test(value) ) {
            if ( ! /(\.[^\\]+)$/.test(value) ) {
                return 'Links to DAM assets cannot be folders/directories.';
            }
        return true;
     }
  }
};

(function(document, $) {
    'use strict';

    Zebra = Zebra || {};
    Zebra.loginStateLoaded = Zebra.loginStateLoaded || $.Deferred();

    var applicationTileMarkup =
          '<div class="applicationtile">'
        +   '<div class="application-icon">'
        +     '<img />'
        +   '</div>'
        +   '<div class="application-title"></div>'
        +   '<div class="application-description"></div>'
        +   '<a class="application-button" target="_blank"></a>'
        + '</div>',
    applicationMissingIconPlaceholder =
          '<div class="application-missing-icon"></div>',
    populateTiles = function() {
        // Find all of the Application Tile paths
        var applicationTileContainerPaths = $('.applicationtiles[data-path]').map(function () {
            return $(this).data('path');
        });

        // Request markup for all of the Application Tiles
        $(applicationTileContainerPaths).each(function(index, path){
            $.ajax({
                dataType: 'json',
                url: path + ".applicationtiles.json",
                cache: false
            }).done(function(allTilesData) {
                if (allTilesData.isLoggedOff) {
                    $('.applicationtiles[data-path]').addClass('applications-not-logged-in');
                } else {
                    // Populate the Application Tiles that you recieved content for
                    $.each(allTilesData, function(index, tileData) {
                        var applicationTile = $(applicationTileMarkup);
                        if (!tileData.requestOnly) {
                            applicationTile.addClass("application-request-only");
                        }
                        if (tileData.icon) {
                            $(".application-icon img", applicationTile).attr("src", tileData.icon);
                        } else {
                            $(".application-icon", applicationTile).replaceWith(applicationMissingIconPlaceholder);
                        }
                        $(".application-title", applicationTile).html(tileData.title);
                        $(".application-description", applicationTile).html(tileData.description);
                        $(".application-button", applicationTile).attr("href", tileData.buttonHref);
                        $(".application-button", applicationTile).html(tileData.buttonText);

                        $('.applicationtiles[data-path="' + path + '"]').append(applicationTile);
                    });
                    $('.applicationtiles[data-path="' + path + '"]').removeClass("applications-loading");
                }
            }).fail(function() {
                $('.applicationtiles[data-path="' + path + '"]').addClass("applications-failed");
            });
        });
    };

    $(document).ready(function() {
        if (!Zebra.ApplicationTileContainerListenerCreated) {
            Zebra.loginStateLoaded.done(populateTiles);
            Zebra.ApplicationTileContainerListenerCreated = true;
        }
    });
})(document, jQuery);

/**
 *  Accordion Component
 */
var Zebra = window.Zebra || {};

Zebra.Accordion = {

    init: function() {
        this.bindUIfunctions(this);
        this.checkAnchorLink();
    },

    bindUIfunctions: function(parentObject) {

        // Delegation
        $(document).on("click", ".accordion-header", function(event) {
            $('.accordion-container').find('.accordion-symbol').html('+');
            
            $('.extra-border').removeClass('show-border');
            if( $(this).hasClass('open') ) {
                $('.accordion-header').removeClass('open');
                $('.accordion-content-container').removeClass('open');
                $('.extra-border').removeClass('show-border');
            }else {
                $('.accordion-header').removeClass('open');
                $('.accordion-content-container').removeClass('open');
                $(this).addClass('open');
                if($(this).parent().hasClass('extra-border')){
                    $(this).parent().addClass('show-border')
                }
                $(this).next().addClass('open');
                $(this).find('.accordion-symbol').html('-');
            }
            $.getScript("/etc/clientlibs/zebra-www-responsive/components/content/dynamicvideolist/js/DynamicVideoList.js",
                                                            function() {resizeTitleList()});
            parentObject.scrollToOpenAccordion(this);
            event.preventDefault();
        });

    },
    // This method changes the open/close icon for the accordion headers
    checkAnchorLink: function() {
        $(document).ready(function() {
            if( location.hash && $(location.hash).hasClass('accordion-content-container') ) {
                $('.accordion-container').find('..accordion-symbol').html('+');
                $('.accordion-content-container').removeClass('open');
                $(location.hash).addClass('open').prev().find('.accordion-symbol').html('-');
            }
        });
    },
     /*This method will scroll window to the selected accordion into view of the page.
        setTimeout is used because for some accordion content it is large so takes a couple ms to
        load which can mess up the offset height check
    */
    scrollToOpenAccordion: function(currentElement) {
        setTimeout(function() {
            //Gets height * 2.5 of header of accordion to add to scroll amount because scrollTop
            // puts top of element out of view behind the sticky navigation
            var height = $(currentElement).height() * 2.5;
            var position = $(currentElement).offset().top;
             $(window).scrollTop(position-height);
        }, 2);
    }
};

Zebra.Accordion.init();
Zebra.Iframe = {
    fields : {
        desktopHeight : '',
        tabletHeight : '',
        mobileHeight : '',
        componentId : ''
    },

    config : function(desktopHeight, tabletHeight, mobileHeight, componentId) {
        this.fields.desktopHeight = desktopHeight;
        this.fields.tabletHeight = tabletHeight;
        this.fields.mobileHeight = mobileHeight;
        this.fields.componentId = componentId;
    },

    init : function(){
        if(window.innerWidth < 580 ) {
            $('#'+this.fields.componentId).height(this.fields.mobileHeight);
        } else if(window.innerWidth > 580 && window.innerWidth < 970) {
            $('#'+this.fields.componentId).height(this.fields.tabletHeight);
        } else {
            $('#'+this.fields.componentId).height(this.fields.desktopHeight);
        }
    }
}
jQuery(function() {

    var Zebra = window.Zebra || {},
        scrollPosition = 0;

    Zebra.Nav = {
        init: function() { // INITIALIZE NAVIGATION
            var $this = this;
            var isMobile = false; //initiate as false
            // device detection
            if ($(window).width() < 950) {
                isMobile = true;
            }

            if (!isMobile) {
                //applies margin to main content to allow space for global-header and secondary nav
                if($(".secondarynavigation")[0]) {
                    $('#main-content').css("margin-top", ($(".global-header").height() + $(".secondarynavigation").height())+"px");
                }
                else {
                    $('#main-content').css("margin-top", ($(".global-header").height())+"px");
                }
                $this.desktopFields();
                $this.showDesktopMenu();
            }
            if (isMobile) {
                //Slide out components from sticky header if mobile
                $('.cookie-container').stop().slideDown(50, "linear");
                $('.headerutility-desktop').stop().slideDown(50, "linear");
                $this.mobileFields();
                $this.showMobileMenu();
                $this.toggleMobileSearch();
            }
        },
        desktopFields: function() {
            //$('.megamenu').hide();
            $('.banner').hide();
            //$('.product-subnav').children().hide();

            var firstSideNavItem = $('.product-category-list > .category-list').find('li')[0];
            var defaultID = $(firstSideNavItem).attr('id');
            $('.product-subnav').find('#' + defaultID).show();
        },
        showDesktopMenu: function() {
            $(".primary-nav-title").mouseenter(function() {
                $('.primary-nav-title').removeClass('selected');
                $(this).addClass('selected');
                if (window.innerWidth > 950) {
                    $('.megamenu').hide();
                    var tab = $(this).data('tab');
                    // Setting megamenu with relevant product that is hovered from primary navigation
                    var subNavId;
                    if($(".megamenu[data-tab='"+tab+"'] li.selected").attr("id")==undefined) {
                        subNavId= $(".megamenu[data-tab='"+tab+"'] li:first").attr("id");
                    } else {
						subNavId= $(".megamenu[data-tab='"+tab+"'] li.selected").attr("id");
                    }
                    $(".product-subnav>div").css('display','none');
                    $(".product-subnav #"+subNavId+"").css('display','block');

                    // to adjust menu height as per content
                    var menuHeight = $(this).parent().find(".megamenu[data-tab=" + tab + "]").outerHeight();
                    menuHeight = menuHeight> 375 ? menuHeight : 375;
                    var prodCategoryList = $(this).parent().find(".megamenu[data-tab=" + tab + "] .product-category-list .category-list");
                    if(prodCategoryList && prodCategoryList.length>0){
                       var isAdjusted = prodCategoryList[0].hasAttribute("style");
                       if(!isAdjusted){
                          menuHeight = menuHeight+4;
                       }
                    }
                    $(prodCategoryList).outerHeight(menuHeight);
                    $('.banner').outerHeight(menuHeight);

                    if ($('.banner').is(":visible")) {
                        $(this).parent().find(".megamenu[data-tab=" + tab + "]").show();
                    } else {
                        $(this).parent().find(".megamenu[data-tab=" + tab + "]").stop().slideDown(500);
                        $('.banner').stop().slideDown(500);
                        //Set background tint to be full size of window
                        $('.background-tint').height($(document).height() + "px");
                        $('.background-tint').show();
                    }
                }
            });
            function hideNav() {
				 	$('.primary-nav-title').removeClass('selected');
                    $('.megamenu').stop().slideUp(500);
                    $('.banner').stop().slideUp(500);
                    $('.background-tint').hide();

            }
            $(".banner,.megamenu").mouseleave(function(e) {
				 if($(e.relatedTarget).attr('class') == 'background-tint'){
					hideNav();             
                 }
            });
            //Functionality for sticky nav bar when user scrolls
            function hideUpperNav() {
                //checks if window is scrolled to the top
                if($(window).scrollTop() == 0) {
                    $('.cookie-container').stop().slideDown(50, "linear");
                    $('.headerutility-desktop').stop().slideDown(50, "linear");
                } else if($(window).scrollTop() > 0 && $('.headerutility-desktop').css("display") != "none") {
                    $('.cookie-container').stop().slideUp(50, "linear");
                    $('.headerutility-desktop').stop().slideUp(50, "linear");
                }
            }
            window.addEventListener('scroll', function(e) {
                hideUpperNav();

                //close megamenu if page is scrolled
				if($(".background-tint").css("display") != "none") {
                    hideNav();
                }
            });
            //Hides utility-nav and cookie if page is refreshed/resized and scroll position is > 0
            window.addEventListener("resize", function() {
                if($(window).scrollTop() > 1) {
                    $('.cookie-container').stop().css("display", "none");
                    $('.headerutility-desktop').stop().css("display", "none");
                }
            });
            window.addEventListener('load', function(e) {
                if($(window).scrollTop() > 1) {
                    $('.cookie-container').stop().css("display", "none");
                    $('.headerutility-desktop').stop().css("display", "none");
                }
            });
            $('.product-category-list').find('.category-list').children().each(function() {
                $(this).mouseenter(function() {
                    if (window.innerWidth > 950) {
                        $(this).parent().find('li').removeClass('selected');
                        $(this).addClass("selected");
                        $('.product-subnav').children().hide();
                        var id = "#" + $(this).attr('id');
                        $('.product-subnav').find(id).show();
                    }
                });
            });
        },
        mobileFields: function() {
            $('.nav-header-center').hide();
            //$('.nav-container').hide();
            $('.megamenu').hide();
        },
        showMobileMenu: function() {
            $('.icon-mobile-hamburger-menu').click(function() {
                $('.utilitymob-menu').show();
                $('.primary-nav-title').show();
                $(".nav-header-center").show("slide", {
                    direction: "right"
                }, 300);
            });
            $('.icon-dismiss').click(function() {
				$(".login-dropdown").hide();
				$(".logged-in-button.selected").removeClass('selected');
                //$(".language-dropdown").hide();
                $(".nav-header-center").hide("slide", {
                    direction: "right"
                }, 300);
            });
            $('.mobile-back').click(function() {
                var parentMenu = $(this).parent();
                $(parentMenu).hide("slide", {
                    direction: "right"
                }, 300);
                $('.utilitymob-menu').show();
                $('.primary-nav-title').show();

            });

            $('.mobile-back-sidenav').click(function() {
                var parentMenu = $(this).parent();
                $(parentMenu).hide("slide", {
                    direction: "right"
                }, 300);
                $(this).closest('.product-category-list').find('.category-list').show();
            });
            $(".primary-nav-title").click(function(e) {
                if ($(window).width() < 950) {
                    if($('.utility-mobile').find('.logged-in-button.selected')[0]) {
                        //Executes if the login is opened in mobile
                        e.preventDefault();
                        $('.utility-mobile').find('.login-dropdown').hide("slide", {
                            direction: "right"
                        }, 1200);
                        $('.utility-mobile').find('.logged-in-button').removeClass('selected');
                    } else {
                        var tab = $(this).data('tab');
                        if(typeof tab !== 'undefined' && $('.primary-nav-title').is(":visible")){
                            $(".navigationcomponent .nav-container.primary-nav .primary-nav-title a").attr("href","javascript:void(0)");
                            $(".navigationcomponent .nav-container.primary-nav .product-category-list .category-list a").attr("href","javascript:void(0)");
                            var megamenu = $(this).parent().find(".megamenu[data-tab=" + tab + "]");
                            $('.product-subnav').children().hide();
                            $('.utilitymob-menu').hide();
                            $('.primary-nav-title').hide();
                            if (!$(megamenu).is(":visible")) {
                                $(megamenu).show("slide", {
                                    direction: "right"
                                }, 1200);
                            }
                        }
                    }
                }
            });
            $('.product-category-list').find('.category-list li').each(function() {
                $(this).click(function(e) {
                    if ($(window).width() < 950 && $(this).closest('.category-list').is(":visible")) {
                        var id = "#" + $(this).attr('id');
                        $('.product-subnav').children().hide();
                        $('.product-subnav').find(id).show("slide", {
                            direction: "right"
                        }, 1200);
                        $(this).closest('.category-list').hide();
                    }
                });
            });

            $('.product-category-list .category-list:first-child .category-label:first-child, .category-list-container .category-list:first-child').each(function () {
                $(this).click(function (e) {
                    if ($(window).width() < 950) {
                        e.preventDefault();
                        var tab = $(this).closest(".megamenu").data('tab');
                        var primaryLink = $(".primary-nav-title[data-tab=" + tab + "]").find("a").attr("href");
                        if (primaryLink) {
                            window.location = primaryLink;
                        }
                    }
                });
            });

            $('.product-subnav .side-sub-nav:nth-child(2) .category-label').each(function () {
                $(this).click(function (e) {
                    if ($(window).width() < 950) {
                        e.preventDefault();
                        var id = $(this).closest(".side-nav-item").attr("id");
                        var primaryLink = $(this).closest(".product-category-list").find("#" + id + " a").attr("href");
                        if (primaryLink) {
                            window.location = primaryLink;
                        }
                    }
                });
            });
        },
        toggleMobileSearch: function() {
            $('.icon-search').click(function() {
                $(".header-search-container").slideToggle(function() {
                    if ($(".icon-search").hasClass("open")) {
                        $(".icon-search").removeClass("open");
                    } else {
                        $(".icon-search").addClass("open");
                    }
                });

            });

        },
    };
    Zebra.Nav.init();
    // END FILE: Zebra.Nav
});


var Zebra = window.Zebra || {};

//start This was added for old browser to show up search results
if(Zebra.BlogSearch == undefined){
    Zebra.BlogSearch = {};
}

if(Zebra.BlogSearch.SearchHeader == undefined){
		Zebra.BlogSearch.SearchHeader = {};
}
//END This was added for old browser to show up search results

Zebra.BlogSearch.SearchHeader = {

    fields : {
        searchResultPage : '',
        solrBlogCollection : '',
        searchServletPath : '',
        enableHeaderConfiguratorSearch : ''

    },

    headerConfig: function(searchResultPage, solrBlogCollection,searchServletPath,enableHeaderConfiguratorSearch) {
        this.fields.searchResultPage = searchResultPage;
        this.fields.solrBlogCollection = solrBlogCollection;
        this.fields.searchServletPath = searchServletPath;
        this.fields.enableHeaderConfiguratorSearch = enableHeaderConfiguratorSearch;

    },

    init: function() {
        var headerInput = $('.blog-search-input'),
		    goToSearchResults = function(fields) {
			    var q 					= $('.blog-search-input').eq(1).val(),
                    searchResultPage    = fields.searchResultPage,
                    windowOrigin        = location.origin,
                    redirectUrl         = windowOrigin + searchResultPage;

                if( q != 'undefined' && q.trim().length > 0){
                    redirectUrl += "?q=" + encodeURIComponent(q) + "&_charset_=UTF-8&enableConfiguratorSearch="+fields.enableHeaderConfiguratorSearch;
                    location = redirectUrl;
                }
		    };

        headerInput.typeahead({
            highlight: false,
            minLength: parseInt(this.fields.charsCount),
        },
        {
            name: 'Search-Results',
            display: 'title',
            limit: 15 ,
            source: function(query, syncResults, asyncResults) {
                var trimmedInput = $('.blog-search-input').eq(1).val().toLowerCase().trim();
                //need to remove /\
                trimmedInput = trimmedInput.replace(/[&\\#,+()$~%.'":*?<>{}]/g, '');
                //trimmedInput = trimmedInput.replace(/[^a-zA-Z0-9-/ ]/g, "").trim();
                trimmedInput = trimmedInput.replace(/-/g, "\\-").replace(/\//g, "\\/");
				trimmedInput=encodeURIComponent(trimmedInput);

                // Predictive Search only searches title and tags of pages.
                trimmedInput = '(title_en:(' + trimmedInput + ') OR tags_en:(' + trimmedInput + ') OR title:(' + trimmedInput + ') OR tags:(' + trimmedInput + ')) AND isProduct:true';

                var searchURL = location.origin + Zebra.BlogSearch.SearchHeader.fields.searchServletPath
                                + "?sc=" + Zebra.BlogSearch.SearchHeader.fields.solrCore
                                + "&q=" + trimmedInput + "&wt=json&rows=" + Zebra.BlogSearch.SearchHeader.fields.rows
								+ "&_charset_=UTF-8";
                $.get(searchURL, function(searchData) {
                    if( searchData ) {
                        var response        = searchData.response.docs,
                            loopCount       = response.length,
                            resultsObjArray = [],
                            arrProductPages = [],
                            arrSupportPages = [];

                        for( var i=0, j=loopCount; i<j; i++ ) {
                            if( response[i].isProduct ) {
                                if(response[i].id.indexOf('/products/') > 0) {
                                    arrProductPages.push(response[i]);
                                } else {
                                    arrSupportPages.push(response[i]);
                                }
                            }
                        }
                        resultsObjArray = resultsObjArray.concat(arrProductPages, arrSupportPages);
                        var resultsToDisplay = [];
                        if( resultsObjArray.length > Zebra.BlogSearch.SearchHeader.fields.productPreviewResultsCount ) {
                            loopCount = Zebra.BlogSearch.SearchHeader.fields.productPreviewResultsCount;
                        }
                        for(var k=0; k<loopCount; k++) {
                            resultsToDisplay.push(resultsObjArray[k]);
                        }
                        asyncResults(resultsToDisplay);
                    }
                });
            },
            templates: {
                empty: '',
                suggestion: function(data) {
                    if (data.isProduct) {
                        return '<div class="search-header-result">' +
                                    '<a href="' + data.url + '">' +
                                        '<img class="search-header-result-img" src="' + data.productResultsHeaderImage + '" />' +
                                        '<div class="predictive-search-title">' +
                                            '<span class="search-header-result__title">' + data.title + '</span>' +
                                        '</div>' +
                                    '</a>' +
                                '</div>';
                    } else {
                        return '<div class="search-header-result">' + data.title + '</div>';
                    }
                },
                footer: '<div class="search-header-result-more-results">' +
                            '<div class="see-more">' +
                                '<a href="#">See more...</a>' +
                            '</div>' +
                        '</div>'
            },
        });
		$('.header-search-container-blog .blog-search-input').on("typeahead:selected", function(){
			goToSearchResults(Zebra.BlogSearch.SearchHeader.fields);
		});

		$('.header-search-container-blog .blog-search-input').on("keypress", function(e){
			var code = (e.keyCode ? e.keyCode : e.which);
			if(code == 13) { //Enter keycode
			goToSearchResults(Zebra.BlogSearch.SearchHeader.fields);
		}
		});
		$('.header-search-container-blog .blog-search-input').on("typeahead:render", function(){
            $('.search-header-result-more-results').on('click', function(e) {
                goToSearchResults(Zebra.BlogSearch.SearchHeader.fields);
            });
        });

		$('.header-search-container-blog .blog-search').on('click', function(e) {
			goToSearchResults(Zebra.BlogSearch.SearchHeader.fields);
			return false;
		});
    }
}
var Zebra = window.Zebra || {};

//start This was added for old browser to show up search results
if(Zebra.Search == undefined){
    Zebra.Search = {};
}

if(Zebra.Search.SearchHeader == undefined){
		Zebra.Search.SearchHeader = {};
}
//END This was added for old browser to show up search results

Zebra.Search.SearchHeader = {

    fields : {
        charsCount : '',
        keywordsCount : '',
        productPreviewResultsCount : '',
        productPreviewInMobile : '',
        searchPagePath : '',
        solrCore : '',
        solrCoreDAM : '',
        searchServletPath : '',
        rows : '',
        enableConfiguratorSearch : ''
    },

    headerConfig: function(charsCount, keywordsCount, productPreviewResultsCount, productPreviewInMobile, searchPagePath,
                        solrCore, solrCoreDAM, searchServletPath, rows, enableConfiguratorSearch) {
        this.fields.charsCount = charsCount;
        this.fields.keywordsCount = keywordsCount;
        this.fields.productPreviewResultsCount = productPreviewResultsCount;
        this.fields.productPreviewInMobile = productPreviewInMobile;
        this.fields.searchPagePath = searchPagePath;
        this.fields.solrCore = solrCore;
        this.fields.solrCoreDAM = solrCoreDAM;
        this.fields.searchServletPath = searchServletPath;
        this.fields.rows = rows;
        this.fields.enableConfiguratorSearch = enableConfiguratorSearch;
    },

    init: function() {
        var headerInput = $('.header-search-container .search-input-container--input'),
		    goToSearchResults = function(fields) {
			    var q 					= $('.header-search-container .search-input-container--input').eq(1).val(),
                    searchPagePath      = fields.searchPagePath,
                    windowOrigin        = location.origin,
                    redirectUrl         = windowOrigin + searchPagePath;

                if( q != 'undefined' && q.trim().length > 0){
                    redirectUrl += "?q=" + encodeURIComponent(q) + "&_charset_=UTF-8&enableConfiguratorSearch="+fields.enableConfiguratorSearch;
                    location = redirectUrl;
                }
		    };

        //Adds classes for css styling for different languages
        var url = window.location.href;
        var mediaQuery = "screen and (min-width: 950px) and (max-width: 1499px), screen and (max-width: 400px)";
		if (url.includes("/tr/tr") || url.includes("/br/pt") || url.includes("/ru/ru") || url.includes("/pl/pl") || url.includes("/fr/fr")) {
			$(".header-right, .search-header-input-container").addClass("fullHeader");
            setTimeout(function() {$(".tt-menu").addClass("fullHeader");});
			mediaQuery = "screen and (min-width: 950px) and (max-width: 1582px), screen and (max-width: 400px)";
        }
        else {
			$(".header-right, .search-header-input-container").addClass("openHeader");
            setTimeout(function() {$(".tt-menu").addClass("openHeader");});
        }

        //Runs if user is on hero or mobile page (non-hero non-mobile search icon has no padding)
        var searchIconPadding = $(".icon-search.search-header-input-container__search-submit-button--i").css("padding");
        var smallText = $(".search-input-container--input").attr("placeholder");
        var largeText = $(".secondPlaceholder").attr("placeholder");
        if (searchIconPadding != "0px" && smallText != largeText) {
            var placeholderMaxWidth = window.matchMedia(mediaQuery);
            sessionStorage.setItem("smallText", smallText);
            sessionStorage.setItem("largeText", largeText);
            Zebra.Search.SearchHeader.swapPlaceholders(placeholderMaxWidth);
            placeholderMaxWidth.addEventListener("change", Zebra.Search.SearchHeader.swapPlaceholders);
        }

        headerInput.typeahead({
            highlight: false,
            minLength: parseInt(this.fields.charsCount),
        },
        {
            name: 'Search-Results',
            display: 'title',
            limit: 15 ,
            source: function(query, syncResults, asyncResults) {
                var trimmedInput = $('.search-header-input-container .search-input-container--input').eq(1).val().toLowerCase().trim();
                //need to remove /\
                trimmedInput = trimmedInput.replace(/[&\\#,+()$~%.'":*?<>{}]/g, '');
                //trimmedInput = trimmedInput.replace(/[^a-zA-Z0-9-/ ]/g, "").trim();
                trimmedInput = trimmedInput.replace(/-/g, "\\-").replace(/\//g, "\\/");
                var queryString = trimmedInput.split(" ").join(" AND ");
                
				trimmedInput=encodeURIComponent(queryString);

                // Predictive Search only searches title and tags of pages.
                trimmedInput = '(title_en:(' + trimmedInput + ') OR tags_en:(' + trimmedInput + ') OR title:(' + trimmedInput + ') OR tags:(' + trimmedInput + ')) AND isProduct:true';

                var searchURL = location.origin + Zebra.Search.SearchHeader.fields.searchServletPath
                                + "?sc=" + Zebra.Search.SearchHeader.fields.solrCore
                                + "&q=" + trimmedInput + "&wt=json&rows=" + Zebra.Search.SearchHeader.fields.rows
								+ "&_charset_=UTF-8";
                $.get(searchURL, function(searchData) {
                        if( searchData ) {
                            var response        = searchData.response.docs,
                                loopCount       = response.length,
                                resultsObjArray = [],
                                arrProductPages = [],
                                arrSupportPages = [];

                            for( var i=0, j=loopCount; i<j; i++ ) {
                                if( response[i].isProduct ) {
                                    if(response[i].id.indexOf('/products/') > 0) {
                                        arrProductPages.push(response[i]);
                                    } else {
                                        arrSupportPages.push(response[i]);
                                    }
                                }
                            }
                            resultsObjArray = resultsObjArray.concat(arrProductPages, arrSupportPages);
                            var resultsToDisplay = [];
                            if( resultsObjArray.length > Zebra.Search.SearchHeader.fields.productPreviewResultsCount ) {
                                loopCount = Zebra.Search.SearchHeader.fields.productPreviewResultsCount;
                            }
                            for(var k=0; k<loopCount; k++) {
                                resultsToDisplay.push(resultsObjArray[k]);
                            }
                            asyncResults(resultsToDisplay);
                        }
                });
            },
            templates: {
                empty: '',
                suggestion: function(data) {
                    if (data.isProduct) {
                        return '<div class="search-header-result">' +
                                    '<a href="' + data.url + '">' +
                                        '<img class="search-header-result-img" src="' + data.productResultsHeaderImage + '" />' +
                                        '<div class="predictive-search-title">' +
                                            '<span class="search-header-result__title">' + data.title + '</span>' +
                                        '</div>' +
                                    '</a>' +
                                '</div>';
                    } else {
                        return '<div class="search-header-result">' + data.title + '</div>';
                    }
                },
                footer: '<div class="search-header-result-more-results">' +
                            '<div class="see-more">' +
                                '<a href="#">See more...</a>' +
                            '</div>' +
                        '</div>'
            },
        });
		$('.header-search-container .search-header-input-container .search-input-container--input').on("typeahead:selected", function(){
			goToSearchResults(Zebra.Search.SearchHeader.fields);
		});

		$('.header-search-container .search-header-input-container .search-input-container--input').on("keypress", function(e){
			var code = (e.keyCode ? e.keyCode : e.which);
			if(code == 13) { //Enter keycode
                if (window._trackData) {
                    _trackData(Zebra.Search.SearchHeader.getStartSearchData());
                }
			    goToSearchResults(Zebra.Search.SearchHeader.fields);
		    }
		});
		$('.header-search-container .search-header-input-container .search-input-container--input').on("typeahead:render", function(){
            $('.search-header-result-more-results').on('click', function(e) {
                goToSearchResults(Zebra.Search.SearchHeader.fields);
            });
        });

		$('.header-search-container .search-header-input-container__search-submit-button').on('click', function(e) {
			 if (window._trackData) {
			    _trackData(Zebra.Search.SearchHeader.getStartSearchData());
			 }
			goToSearchResults(Zebra.Search.SearchHeader.fields);
			return false;
		});

        if (window._trackData) {
            $(".tt-menu").on("click", ".search-header-result.tt-suggestion.tt-selectable", function () {
                _trackData(Zebra.Search.SearchHeader.getClickSearchData(this));
            });

            $(".tt-menu").on("click", ".see-more a", function() {
                _trackData(Zebra.Search.SearchHeader.getStartSearchData());
            });
        }
    },

    //Function to get search data when a user enters a search term
    getStartSearchData : function() {
        var dataName = $("div.search-wrapper[data-analytics-tracking-name]").attr("data-analytics-tracking-name");
        var startData = {
            "events" : {
                "searchInit":true
            },
            "search" : {
                "keyword" : $(".search-input-container--input.tt-input").val().toLowerCase(),
                "location" : dataName ? dataName : "global_header",
                "type" : $(".search-input-container--input.tt-input").val() != "" ? 'user_input' : 'suggested'
            }
        }
        return startData;
    },

    //Function to get search data when a user selects one of the suggested options after entering a search term
    getClickSearchData : function(element) {
        var dataName = $("div.search-wrapper[data-analytics-tracking-name]").attr("data-analytics-tracking-name");
        var clickData = {
            "events": {
                "searchInit":true,
                "search":true,
                "searchClick":true
            },
            "search": {
                "keyword" : $(".search-input-container--input.tt-input").val().toLowerCase(),
                "location" : dataName ? dataName : "global_header",
                "resultCount" : $('.tt-dataset.tt-dataset-Search-Results').find('a').length-1,
                "type" : 'suggested',
                "clickRank" : Array.prototype.indexOf.call(element.parentNode.children, element)+1,
                "clickURL" : element.firstChild.href,
                "pageNumber" : "1"
            }
        }
        return clickData;
    },

    //Function to swap header search placeholder text when search bar shrinks on hero pages
    swapPlaceholders : function(maxWidth) {
        if (maxWidth.matches) {
            $(".search-input-container--input").attr("placeholder", sessionStorage.getItem("smallText"));
            $(".secondPlaceholder").attr("placeholder", sessionStorage.getItem("largeText"));
        }
        else {
            $(".search-input-container--input").attr("placeholder", sessionStorage.getItem("largeText"));
            $(".secondPlaceholder").attr("placeholder", sessionStorage.getItem("smallText"));
        }
    }
}
var Zebra = window.Zebra || {};

if (!$('.searchResults-container ul').has("li").length) {
    $('.searchResults-container .noResults-message').show();
} else {
    $('.searchResults-container .noResults-message').hide();
}

Zebra.Search.SearchResult = {
    'selectedTags': [],

    fields: {
        solrCore: '',
        solrCoreDAM: '',
        searchServletPath: '',
        solrRedirectServletPath: '',
        damSearchPath: '',
        excludeAssets: '',
        excludePages: '',
        rows: '',
        enableConfiguratorSearch : ''
    },

    resultConfig: function(solrCore, solrCoreDAM, searchServletPath, solrRedirectServletPath, damSearchPath, excludeAssets, excludePages, rows, enableConfiguratorSearch) {
        this.fields.solrCore = solrCore;
        this.fields.solrCoreDAM = solrCoreDAM;
        this.fields.searchServletPath = searchServletPath;
        this.fields.solrRedirectServletPath = solrRedirectServletPath;
        this.fields.damSearchPath = damSearchPath;
        this.fields.excludeAssets = excludeAssets;
        this.fields.excludePages = excludePages;
        this.fields.rows = rows;
        this.fields.enableConfiguratorSearch = enableConfiguratorSearch;
    },

    init: function(e) {
        // perform search click
        // onclick="Zebra.Search.SearchResult.performSearch()"

        var searchTerm = "";
        var sPageURL = window.location.search.substring(1),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;

        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');

            if (sParameterName[0] === "q") {
                searchTerm = sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
            }
        }

        if (searchTerm.length > 0) {
            searchTerm = searchTerm.split(') AND (');
        }

        if (!$('.searchResults-container ul').has("li").length) {
            $('.searchResults-container .noResults-message').show();
        } else {
            $('.searchResults-container .noResults-message').hide();
        }

        if (searchTerm.length > 1) {
            // split, check if tags available
            var tags = searchTerm[0].replace(')', '').replace('(', '').split(' AND ');
            // for each tag in query
            for (var i = 0, j = tags.length; i < j; i++) {
                var valueIndex = Zebra.Search.SearchResult.selectedTags.indexOf(tags[i]);
                // add to tags array if not already there
                if (valueIndex < 0) {
                    Zebra.Search.SearchResult.selectedTags.push(tags[i]);
                }
                // for each dropdown
                $('.filter-items').find('select').each(function() {
                    var dropdown = $(this),
                        selectedTag = $(this).val(); // get current value
                    // for each option in this dropdown
                    $(this).find('option').each(function() {
                        var thisTag = tags[i];
                        // if this option value is equal to the current tag
                        if ($(this).val() == thisTag) {
                            // if previous value
                            if (selectedTag) {
                                // remove from tags array
                                Zebra.Search.SearchResult.selectedTags.splice(selectedTag, 1);
                            }
                            // set dropdown value
                            dropdown.val(thisTag);
                        }
                    });
                });
            }

            if (searchTerm.length > 1) {
                $("input[data-role=textinput]").val(searchTerm[1].replace(')', '').replace('(', ''));
            } else {
                $(".search-query").val(searchTerm[0]);
            }

            Zebra.Search.SearchResult.performSearch();

            if (!$('.searchResults-container ul').has("li").length) {
                $('.searchResults-container .noResults-message').show();
            } else {
                $('.searchResults-container .noResults-message').hide();
            }

        } else if (searchTerm.length > 0) {
            $(".search-query").val(searchTerm[0]);
            Zebra.Search.SearchResult.performSearch();

            if (!$('.searchResults-container ul').has("li").length) {
                $('.searchResults-container .noResults-message').show();
            } else {
                $('.searchResults-container .noResults-message').hide();
            }
        } else {
            $('.searchResults-count').hide();
            $(".search-progress-bar").hide();
            $('.searchResults-container .didYouMean').hide();
        }

        $('.search-query').on("keypress", function(e) {
            var key = e.which;
            if (key == 13) // the enter key code
            {
                Zebra.Search.SearchResult.selectedTags = [];
                $('.tags-container').empty();
                $('.filter-items').find('select').val('');
                $('.selectBox-label').html('-No Selection-');
                var searchTerm = $("input[data-role=textinput]").val().trim();
                if (searchTerm.length > 0) {
                    window.location = window.location.href.split('?')[0] + "?q=" + encodeURIComponent(searchTerm) + "&_charset_=UTF-8";
                }
                var emptyData = {};
                if (window._trackData) {
                    _trackData(Zebra.Search.SearchResult.getResultsFilters(emptyData));
                }
            }
        });

        $(document).on('click', '.clear-all-btn', function(e) {
            Zebra.Search.SearchResult.selectedTags = [];
            var noSelection;
            $('.filter-items').find('select.selectBox').each(function(val) {
                noSelection = this.options[0].text;
                //console.log(noSelection);
            });
            $('.tags-container').empty();
            $('.filter-items').find('select').val('');
            $('.selectBox-label').html(noSelection);
            Zebra.Search.SearchResult.clearResults();
            e.preventDefault();
        });

        $(document).on('click', '.tags-container span a', function(e) {
            // console.info('click');
            var span = $(this).parent(),
                value = $(this).text();
            // remove from html
            span.remove();

            Zebra.Search.SearchResult.selectedTags.splice(span.data('index'), 1);
            Zebra.Search.SearchResult.clearResults();

            $('.filter-items').find('select').each(function(i) {
                var filter = $(this);
                if (filter.val() == value) {
                    filter.val('');
                    filter.parent().find('.selectBox-label').html('-No Selection-');
                }
            });

            e.preventDefault();
        });

        $(document).on('click', '.search-filter-toggle', function() {
            $('.filter-container').css({
                left: -10,
                right: -10
            });
        });

        $(document).on('click', '.filter-mobile-btn', function() {
            $('.filter-container').css({
                left: -900,
                right: 900,
            });
        });

        $(document).on('click', '.filter-mobile-close', function() {
            $('.filter-container').css({
                left: -900,
                right: 900,
            });
        });

        $(document).on('click', '.search-new-submit', function() {
            Zebra.Search.SearchResult.selectedTags = [];
            $('.filter-items').find('select').val('');
            //$('.selectBox-label').html('-No Selection-');
            var searchTerm = $("input[data-role=textinput]").val().trim();
            if (searchTerm.length > 0) {
                window.location = window.location.href.split('?')[0] + "?q=" + encodeURIComponent(searchTerm) + "&_charset_=UTF-8";
            }
            var emptyData = {};
            if (window._trackData) {
                _trackData(Zebra.Search.SearchResult.getResultsFilters(emptyData));
            }
        });

        $(document).on('click', '.spelled-term', function() {
            if ($(this).text().length > 0) { // this will never be empty but still checking
                window.location = window.location.href.split('?')[0] + "?q=" + $(this).text();
            }
        });

        $('.filter-items').find('select').on('change', function() {
            var filterValue = $(this).val(),
                filterOptions = $(this).find('option'),
                resultCount = 0,
                tagsContainer = $('.tags-container');

            for (var i = 0, j = filterOptions.length; i < j; i++) {
                var option = $(filterOptions[i]),
                    valueIndex = Zebra.Search.SearchResult.selectedTags.indexOf(option.val());

                if (valueIndex > -1) {
                    Zebra.Search.SearchResult.selectedTags.splice(valueIndex, 1);
                }
            }

            if (filterValue)
                Zebra.Search.SearchResult.selectedTags.push(filterValue);

            //console.info(Zebra.Search.SearchResult.selectedTags);
            if (Zebra.Search.SearchResult.selectedTags.length > 0) {
                $('.searchResults-container').find('li').each(function() {
                    var tags = $(this).data('tags').split(','),
                        hasTag = false;
                    //console.info(tags);

                    for (var i = 0, j = tags.length; i < j; i++) {
                        if (Zebra.Search.SearchResult.selectedTags.indexOf(tags[i]) > -1) {
                            hasTag = true;
                        }
                    }

                    if (hasTag) {
                        $(this).removeClass('hide');
                        resultCount++;
                    } else {
                        $(this).addClass('hide');
                    }
                });
            } else {
                $('.searchResults-container').find('li').removeClass('hide');
                resultCount = $('.searchResults-container').find('li').length;
            }

            tagsContainer.empty();

            for (var i = 0, j = Zebra.Search.SearchResult.selectedTags.length; i < j; i++) {
                var tag = Zebra.Search.SearchResult.selectedTags[i];
                tagsContainer.append('<span data-index="' + i + '">' + tag + ' <a href="#">X</a></span>');
            }

            $('.searchResults-count strong').html(resultCount);

            Zebra.Search.SearchResult.clearResults();

            if (!$('.searchResults-container ul').has("li").length) {
                $('.searchResults-container .noResults-message').show();
            } else {
                $('.searchResults-container .noResults-message').hide();
            }
        });

        if (window._trackData) {
            $(".search-suggestion .spelled-term").on("click", function() {
                _trackData(Zebra.Search.SearchResult.getDidYouMeanData());
            });

            $(".clear-all.clear-all-btn").on("click", function() {
                 _trackData(Zebra.Search.SearchResult.getFiltersClearedData());
            });

            $(".searchResults-container").on("click", "a:not('.search-suggestion .spelled-term')", function() {
                var clickData = Zebra.Search.SearchResult.getSearchResultCLickData(this);

                //Check filters and only send tracking if there are no filters
                var allFilers = [];
                $(".filter-items .selectBox-label").each(function() {
                    allFilers.push($(this).html());
                });
                if (new Set(allFilers).size != 1) {
                   clickData = Zebra.Search.SearchResult.getResultsFilters(clickData);
                }

                _trackData(clickData)
            });
        }
    },

    clearResults: function() {
        $('.searchResults-count').hide();
        $('.searchResults-container ul').empty();
        Zebra.Search.SearchResult.performSearch();

        if (!$('.searchResults-container ul').has("li").length) {
            $('.searchResults-container .noResults-message').show();
        } else {
            $('.searchResults-container .noResults-message').hide();
        }
    },

    performSearch: function(fields) {
        var searchServletPath = this.fields.searchServletPath,
            solrRedirectServletPath = this.fields.solrRedirectServletPath,
            solrCore = this.fields.solrCore,
            solrCoreDAM = this.fields.solrCoreDAM,
            damSearchPath = this.fields.damSearchPath,
            rows = this.fields.rows,
            urlMain = location.origin + searchServletPath + "?sc=" + solrCore + "&q=",
            urlDam = location.origin + searchServletPath + "?sc=" + solrCoreDAM + "&q=",
            windowSize = $(window).width();
            enableConfiguratorSearch = this.fields.enableConfiguratorSearch;
        console.log("searchServletPath : " + searchServletPath);

        $(".search-progress-bar").show();
        $('.searchResults-count').hide();

        if (fields !== undefined) {
            // the search was triggered from - Did you mean
            $("input[data-role=textinput]").val(fields);
        }
        var trimmedInput = $("input[data-role=textinput]").val().toLowerCase().trim();

        //assigning this to a var to use it to check against the results title
        var queryText = trimmedInput;
        //need to remove /\
        trimmedInput = trimmedInput.replace(/[&\\#,+()$~%.'":*?<>{}]/g, '');
        //trimmedInput = trimmedInput.replace(/[^a-zA-Z0-9-/ ]/g, "").trim();
        trimmedInput = trimmedInput.replace(/-/g, "\\-").replace(/\//g, "\\/");

        trimmedInput = "text:\""+trimmedInput+"\"";
        trimmedInput=encodeURIComponent(trimmedInput);//we are doing else solr query failes for querys like Endüstriyel yazıcı in tr/tr language

        var query = "(" + trimmedInput + ")";

        $('.searchResults-container .didYouMean').hide();

        if (query.length > 0) {
            if (Zebra.Search.SearchResult.selectedTags.length > 0) {
                for (var i = 0, j = Zebra.Search.SearchResult.selectedTags.length; i < j; i++) {
                    query += " AND " + '"' + Zebra.Search.SearchResult.selectedTags[i] + '"';
                }
            }
            if (damSearchPath || damSearchPath.length) {
                damSearchPath = '&fq=url:"' + damSearchPath + '"';
            }

            var damSelection = this.fields.excludeAssets;
            var pageSelection = this.fields.excludePages;

            urlMain += query + "&wt=json&rows=" + rows + "&_charset_=UTF-8&sow=false";
            urlDam += query + damSearchPath + "&wt=json&rows=" + rows + "&_charset_=UTF-8";

            // sorting logic: Sort Order: - Support Pages, Product Pages, Support n Downloads Pages, Everything Else
            var arrProductAndSupportInTitle = [];
            var arrProductPagesWithIsProductChecked = [];
            var arrQueryNameInTitle = [];
            var arrProductPagesWithoutSpecSheets = [];
            var arrSupportPagesWithIsProductChecked = [];
            var arrSupportPagesWithoutKnowledgeArticles = [];
            var arrKnowledgeArticles = [];
            var arrSpecSheets = [];
            var arrOtherPages = [];
            var arrDisplayOrder = [];
            var arrURLMain = [];
            var arrDAMAssets = [];
            var spellCheckSuggestion = '';
            var search_input = $("input[data-role=textinput]").val().toLowerCase().trim();
            var path = window.location.pathname;
            var enableHeaderConfiguratorSearch = '';

            var queryString = window.location.search;
            if(queryString != null && enableConfiguratorSearch != true){
                var urlParams = new URLSearchParams(queryString);
                enableHeaderConfiguratorSearch = urlParams.get('enableConfiguratorSearch');
            }

            if(enableConfiguratorSearch || enableHeaderConfiguratorSearch){
                jQuery.ajax({
                    url: solrRedirectServletPath,
                    method: "GET",
                    async: false,
                    success: function(data) {
                        var countryCode = path.split("/")[1]+"_"+path.split("/")[2];
                        console.log("countryCode: "+countryCode);
                        var solrredirectconfigurations_code = "solrredirectconfigurations_"+countryCode;

                        $.each(data, function (index, value) {
                            var redirectDataObj = jQuery.parseJSON(value);
                            $.each(redirectDataObj, function (index, value) {
                                 if(solrredirectconfigurations_code == index){
                                     var redirectCountryData = jQuery.parseJSON(value);
                                     $.each(redirectCountryData, function (index, value) {
                                         var ComponentData = JSON.parse(value);
                                         var searchTerm = ComponentData.searchTerm;
                                         var redirectUrl = ComponentData.redirectionUrl;
                                         var redirectSearchTerms = searchTerm.split(",");
                                         $.each(redirectSearchTerms,function(i) {
                                             if(search_input == redirectSearchTerms[i]) {
                                                 window.location.href = redirectUrl;
                                             }
                                         });
                                     });
                                 }
                            });
                         });
                    }
                });
            }

            if (pageSelection == "false") {
                jQuery.ajax({
                    url: urlMain,
                    method: "GET",
                    async: false,
                    success: function(data) {
                        // collation example from Solr
                        // "collations":["collation","mc45"]
                        // the actual correct spelling is on index 1.
                        if (data.spellcheck != undefined) {
                            if (data.spellcheck.collations[1] !== undefined) {
                                spellCheckSuggestion = data.spellcheck.collations[1];
                            }
                        }
                        arrURLMain = data.response.docs;
                    }
                });
            }

            $.each(arrURLMain, function(index, result) {
                var resultTitle = result.title.toLowerCase();
                if ((resultTitle.indexOf(queryText) > -1 && resultTitle.indexOf('support') > -1) && result.isProduct) {
                    arrProductAndSupportInTitle.push(result);
                } else if (result.id.indexOf('/products/') > 0 && result.isProduct) {
                    arrProductPagesWithIsProductChecked.push(result);
                } else if (result.id.indexOf('/products/') > 0 && result.id.indexOf('spec-sheet') == -1) {
                    arrProductPagesWithoutSpecSheets.push(result);
                } else if (result.id.indexOf('/products/') > 0 && result.id.indexOf('spec-sheet') > 0) {
                    // this takes care of spec sheets
                    arrSpecSheets.push(result);
                } else if (resultTitle.indexOf(queryText) > -1 && result.id.indexOf('knowledge-articles') == -1) {
                     arrQueryNameInTitle.push(result);
                } else if (result.id.indexOf('/support-downloads/') > 0 && result.isProduct) {
                    arrSupportPagesWithIsProductChecked.push(result);
                } else if (result.id.indexOf('/support-downloads/') > 0 && result.id.indexOf('knowledge-articles') > 0) {
                    arrKnowledgeArticles.push(result);
                } else if (result.id.indexOf('/support-downloads/') > 0 && result.id.indexOf('knowledge-articles') == -1) {
                    arrSupportPagesWithoutKnowledgeArticles.push(result);
                } else {
                    // For e.g. Press Releases, Contact Zebra, About Zebra etc.
                    arrOtherPages.push(result);
                }
            });

            arrDisplayOrder = arrDisplayOrder.concat(arrProductAndSupportInTitle,
                arrProductPagesWithIsProductChecked,
                arrQueryNameInTitle,
                arrSupportPagesWithIsProductChecked,
                arrSupportPagesWithoutKnowledgeArticles,
                arrProductPagesWithoutSpecSheets,
                arrSpecSheets);

             var arrSoftwareAssets = [];
             var arrDriverAssets = [];
             var arrFirmwareAssets = [];
             var arrDeveloperToolsAssets = [];
             var arrUtilitiesAssets = [];
             var arrSpecSheetAssets = [];
             var arrManualZeroAssets = [];
             var arrFactSheetAssets = [];
             var arrTechSpecsAssets = [];
             var arrGuideAssets = [];
             var arrGuideConfigurationAndAccessoriesAssets = [];
             var arrGuidePortfolioAssets = [];
             var arrSuccessStoryAssets = [];
             var arrDeclarationOfConformityAssets = [];
             var arrOtherAssets = [];
             var arrWithOutFlagAssets = [];

            if (damSelection == "false") {
                jQuery.ajax({
                    url: urlDam,
                    method: "GET",
                    async: false,
                    success: function(data) {
                        // checking if DAM Solr Collection returned proper response
                        // If ExcludeAsset checkbox is selected, asset list is bypassed - passing empty array to final array
                        $(".search-progress-bar").show();
                        if (data.response !== undefined && data.response.docs !== undefined) {
                            $.each(data.response.docs, function(index, result) {
                                if (result.mimeType == 'application/pdf' || result.mimeType == 'application/msword') {
                                    var selectedArray = result.assetType;
                                    // DAM sorting logic: Sort Order: based on assetType and tags
                                    if (Array.isArray(selectedArray) && selectedArray.length) {
                                        if ( $.inArray('software',selectedArray) > -1 ) {
                                            arrSoftwareAssets.push(result);
                                        }
                                        else if ( $.inArray('driver',selectedArray) > -1 ) {
                                            arrDriverAssets.push(result);
                                        }
                                        else if ( $.inArray('firmware',selectedArray) > -1 ) {
                                            arrFirmwareAssets.push(result);
                                        }
                                        else if ( $.inArray('developer-tools',selectedArray) > -1 ) {
                                            arrDeveloperToolsAssets.push(result);
                                        }
                                        else if ( $.inArray('utilities',selectedArray) > -1 ) {
                                            arrUtilitiesAssets.push(result);
                                        }
                                        else if ( $.inArray('spec-sheet',selectedArray) > -1 ) {
                                            arrSpecSheetAssets.push(result);
                                        }
                                        else if ( $.inArray('manual0',selectedArray) > -1 ) {
                                            arrManualZeroAssets.push(result);
                                        }
                                        else if ( $.inArray('fact-sheet',selectedArray) > -1 ) {
                                            arrFactSheetAssets.push(result);
                                        }
                                        else if ( $.inArray('tech-specs',selectedArray) > -1 ) {
                                            arrTechSpecsAssets.push(result);
                                        }
                                        else if ( $.inArray('guide',selectedArray) > -1 ) {
                                            arrGuideAssets.push(result);
                                        }
                                        else if ( $.inArray('guide-configuration-and-accessories',selectedArray) > -1 ) {
                                            arrGuideConfigurationAndAccessoriesAssets.push(result);
                                        }
                                        else if ( $.inArray('guide-portfolio',selectedArray) > -1 ) {
                                            arrGuidePortfolioAssets.push(result);
                                        }
                                        else if ( $.inArray('success-story',selectedArray) > -1 ) {
                                            arrSuccessStoryAssets.push(result);
                                        }
                                        else if ( $.inArray('declaration-of-conformity',selectedArray) > -1 ) {
                                            arrDeclarationOfConformityAssets.push(result);
                                        }
                                        else {
                                            arrOtherAssets.push(result);
                                        }
                                    }
                                    else if(Array.isArray(result.tags) && result.tags.length) {
                                        selectedArray = result.tags;
                                        var tagName = selectedArray[selectedArray.length-1];
                                        if ( tagName.indexOf('software') > -1 ) {
                                            arrSoftwareAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('driver') > -1 ) {
                                            arrDriverAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('firmware') > -1 ) {
                                            arrFirmwareAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('developer-tools') > -1 ) {
                                            arrDeveloperToolsAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('utilities') > -1 ) {
                                            arrUtilitiesAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('spec-sheet') > -1 ) {
                                            arrSpecSheetAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('manual0') > -1 ) {
                                            arrManualZeroAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('fact-sheet') > -1 ) {
                                            arrFactSheetAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('tech-specs') > -1 ) {
                                            arrTechSpecsAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('guide') > -1 ) {
                                            arrGuideAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('guide-configuration-and-accessories') > -1 ) {
                                            arrGuideConfigurationAndAccessoriesAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('guide-portfolio') > -1 ) {
                                            arrGuidePortfolioAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('success-story') > -1 ) {
                                            arrSuccessStoryAssets.push(result);
                                        }
                                        else if ( tagName.indexOf('declaration-of-conformity') > -1 ) {
                                            arrDeclarationOfConformityAssets.push(result);
                                        }
                                        else{
                                            arrOtherAssets.push(result);
                                        }
                                    }
                                    else {
                                        arrWithOutFlagAssets.push(result);
                                    }

                                }
                            });
                        }
                    }
                });
            }
            arrDAMAssets = arrDAMAssets.concat(arrSoftwareAssets,
                                                arrDriverAssets,
                                                arrFirmwareAssets,
                                                arrDeveloperToolsAssets,
                                                arrUtilitiesAssets,
                                                arrSpecSheetAssets,
                                                arrManualZeroAssets,
                                                arrFactSheetAssets,
                                                arrTechSpecsAssets,
                                                arrGuideAssets,
                                                arrGuideConfigurationAndAccessoriesAssets,
                                                arrGuidePortfolioAssets,
                                                arrSuccessStoryAssets,
                                                arrDeclarationOfConformityAssets,
                                                arrKnowledgeArticles,
                                                arrOtherAssets,
                                                arrWithOutFlagAssets);

            arrDisplayOrder = arrDisplayOrder.concat(arrDAMAssets, arrOtherPages);
            $(".search-progress-bar").hide();
            $('.searchResults-count').show();

            if (arrDisplayOrder.length == 0 && Zebra.Search.SearchResult.selectedTags.length == 0) {
                // we need to show this only for new search
                if (spellCheckSuggestion.length > 0) {
                    $('.searchResults-container .didYouMean').show();
                    var suggestion = spellCheckSuggestion.replace(/ AND /g, '');
                    if (suggestion.indexOf('usertype:') > 0) {
                        suggestion = suggestion.substring(0, suggestion.indexOf('usertype:') - 1);
                    }
                    if (suggestion.indexOf('text:') > 0) {
                    	suggestion = suggestion.replace(/text/g,"");
                    	suggestion = suggestion.replace(/[^a-zA-Z0-9]/g, ' ');
                    	suggestion = suggestion.trim();
                    }
                    $('.searchResults-container .didYouMean .search-suggestion').html('');
                    $('.searchResults-container .didYouMean .search-suggestion').html("<a class='spelled-term'>" + suggestion + "</a>");
                }
            } else {
                $('.searchResults-container .didYouMean').hide();
            }
            $.each(arrDisplayOrder, function(index, result) {
                var tagString = (result.tags) ? result.tags.toString().split('$$').toString() : '',
                    resultHTML = '<li data-tags="' + tagString + '"><div><a href=\"' + result.url + '\">' + result.title + '</a>' +
                    ((typeof(result.description) !== 'undefined' && (result.description) !== 'N/A') ? '<p>' + result.description + '</p>' : '') + '</div></li>';
                $('.searchResults-container ul').append(resultHTML);
                $('.searchResults-container .noResults-message').hide();
            });
            $('.searchResults-count strong').html($('.searchResults-container').find('li').length);
        } else {
            $(".search-progress-bar").hide();
            $('.searchResults-count strong').html($('.searchResults-container').find('li').length);
            $('.searchResults-count').show();
        }
    },

    getDidYouMeanData : function() {
        var didYouMeanProps = {
            "events": {
                "searchInit":true,
                "searchClick":true,
                "searchNoResultClick":true
            },
            "search": {
                "keyword" :$(".search-suggestion .spelled-term").html(),
                "location" :"sitesearch",
                "type" :'suggested',
                "clickRank" :"1",
                "clickURL" :$(".search-suggestion .spelled-term").html()
            }
        };
        return didYouMeanProps;
    },

    getResultsFilters : function(dataSet) {
        var allFilters = [];
        $(".filter-items .selectBox-label").each(function() {
            allFilters.push($(this).html());
        });

        var filterTitles = [];
        $(".filter-items div h3").each(function() {
            filterTitles.push($(this).html());
        });
        dataSet.events = dataSet.events || {};
        dataSet.search = dataSet.search || {};
        dataSet.events.searchFiltersApplied = true;
        dataSet.search.keyword = $(".search-input-container .search-query").val();
        dataSet.search.location = "sitesearch";
        dataSet.search.type = 'user_input';
        dataSet.search.filters = allFilters.map(function(filter, index) {
            return {
                "category": filterTitles[index].toLowerCase(),
                "name": filter.toLowerCase()
            };
        });
        return dataSet;
    },

    getFiltersClearedData : function() {
        var filterProps = {
            "events": {
                "searchFiltersCleared":true
            },
            "search" : {
                "keyword" :$(".search-input-container .search-query").val().toLowerCase(),
                "location" :"sitesearch",
                "type" :'user_input',
                "filters":[]
            }
        };
        return filterProps;
    },

    getSearchResultCLickData : function(element) {
        var searchClickProps = {
            "events": {
                "searchClick":true
            },
            "search" : {
                "clickRank" :$(element).closest("ul").children().index($(element).closest("li"))+1,
                "clickURL" :element.href,
                "pageNumber" :"1"
            }
        };
        return searchClickProps;
    }
}
var Zebra = window.Zebra || {};

Zebra.Search.SupportDownloads = {

    fields : {
        charsCount					: '',
        keywordsCount				: '',
        productPreviewResultsCount	: '',
        productPreviewInMobile		: '',
        resultsPagePath				: '',
        solrCore					: '',
        searchServletPath           : '',
        facets						: {
            field	: "title",
            prefix 	: ""
        },
        enableConfiguratorSearch : ''
    },

    searchConfig: function(charsCount, keywordsCount, productPreviewResultsCount, productPreviewInMobile, resultsPagePath,
                            solrCore, searchServletPath, enableConfiguratorSearch) {
        this.fields.charsCount = charsCount;
        this.fields.keywordsCount = keywordsCount;
        this.fields.productPreviewResultsCount = productPreviewResultsCount;
        this.fields.productPreviewInMobile = productPreviewInMobile;
        this.fields.resultsPagePath = resultsPagePath;
        this.fields.solrCore = solrCore;
        this.fields.searchServletPath = searchServletPath;
        this.fields.enableConfiguratorSearch = enableConfiguratorSearch;
    },

    init: function() {
        var $supportInput = $('.supportdownloadssearch .search-input-container--input'),
            itemSelected = function(event){
                var windowOrigin        = location.origin;
                if( arguments[0].length > 1){
                    var redirect = {
                        origin: windowOrigin,
                        url: arguments[0][1].url || ''
                    };

                    if(!$('#supportSearchWrap').data('iframe')) {
                        window.location = redirect.url;
                    } else {
                        try {
                            parentWindow.source.postMessage(JSON.stringify(redirect), parentWindow.origin);
                        } catch(e) {
                            window.location = redirect.url;
                        }
                    }
                }
            },
            goToSearchResults = function() {
                var q 					= $('.supportdownloadssearch .search-input-container--input').eq(1).val(),
                    searchResultsPath   = Zebra.Search.SupportDownloads.fields.resultsPagePath,
                    windowOrigin        = location.origin,
                    redirectUrl         = windowOrigin + searchResultsPath;

                if( q != 'undefined' ){
                    redirectUrl += "?q=" + encodeURIComponent(q) + "&_charset_=UTF-8&enableConfiguratorSearch="+Zebra.Search.SupportDownloads.fields.enableConfiguratorSearch;
                    location = redirectUrl;
                }
            };

        $supportInput.typeahead({
            highlight: true,
            minLength: parseInt(Zebra.Search.SupportDownloads.fields.charsCount),
        },
        {
            name: 'Search-Results',
            displayKey: 'title',
            displayKey2: 'type',
            displayKey3: 'commingFrom',
            limit: 15,
            source: function(query, syncResults, asyncResults) {
                var trimmedInput = $('.supportdownloadssearch .search-input-container--input').eq(1).val().toLowerCase().trim();
                //need to remove /\
                trimmedInput = trimmedInput.replace(/[&\\#,+()$~%.'":*?<>{}]/g, '');
                //trimmedInput = trimmedInput.replace(/[^a-zA-Z0-9-/ ]/g, "").trim();
                trimmedInput = trimmedInput.replace(/-/g, "\\-").replace(/\//g, "\\/");

                var searchURL = location.origin + Zebra.Search.SupportDownloads.fields.searchServletPath + "?sc=" + Zebra.Search.SupportDownloads.fields.solrCore + "&q=" + trimmedInput + "&wt=json" + "&_charset_=UTF-8";

                $.get(searchURL, function(searchData) {
                    if( searchData ) {
                        var results        = searchData.response.docs,
                            loopCount      = results.length,
                            resultsObjArray = [];

                        if( results.length > Zebra.Search.SupportDownloads.fields.productPreviewResultsCount ) {
                            loopCount = Zebra.Search.SupportDownloads.fields.productPreviewResultsCount;
                        }

                        for( var i = 0, j=loopCount; i < j; i++){
                            var title, n, commingFrom = 'I', separator;

                            var url = results[i].url;
                            var title = results[i].title;

                            var weight = 1;

                            var urlTokens = url.split("/");
                            var type = urlTokens[urlTokens.length - 2].replace('+',' ');

                            if(url.indexOf("http") >= 0){
                                commingFrom = "E";
                                separator = "##";
                            }else{
                                commingFrom = "I";
                                separator = "##";
                            }

                            resultsObjArray.push( { "title" : title , "weight" : weight, "url" : url, "type": type, "commingFrom": commingFrom} );
                        }

                        asyncResults(resultsObjArray);
                    }
                });
            }
        });

        $supportInput.on("typeahead:selected", function() {
            itemSelected(arguments);;
        });
        $('.supportdownloadssearch .search-header-input-container .search-input-container--input').on("keypress", function(e){
            var code = (e.keyCode ? e.keyCode : e.which);
            if(code == 13) { //Enter keycode
                goToSearchResults(arguments);
            }
        });

        $('.supportdownloadssearch .search-header-input-container .search-input-container__search-submit-button').on('click', function(e) {
            goToSearchResults(arguments);
            return false;
        });
    }
}
/**
 *  Chat Component
 */
var Zebra = window.Zebra || {};

Zebra.ChatComponent = {

    init: function() {
        var contactUs = jQuery('.chat-contactus'),
            chatBtn = jQuery('.chat-button'),
            bcStaticImg = jQuery('.bcStatic').find('img');

        if (contactUs.data('wcm-mode')) {
            contactUs.show();
            chatBtn.hide();
        }

        if (bcStaticImg.length > 0) {
            var imageSrc = bcStaticImg.attr('src');
            if (imageSrc != undefined && imageSrc.indexOf('.zebra.com') == -1) {
                contactUs.show();
                chatBtn.hide();
            } else {
                if (contactUs.data('wcm-mode')) {
                    contactUs.show();
                    chatBtn.hide();
                } else {
                    contactUs.hide();
                    chatBtn.show();
                }
            }
        }

        setTimeout(Zebra.ChatComponent.init, 1000);

        if(jQuery('.chatcomponent').parent('div.contact-zebra-button').length != 0) {
            var contactZebraButton = jQuery('.chatcomponent').parent('div.contact-zebra-button');
            jQuery(contactZebraButton).find('.chat-button').removeClass("chat-wrapper");
			jQuery(contactZebraButton).find('.chat-contactus').removeClass("chat-wrapper");
            jQuery('.chatcomponent').addClass("contactzebra-chat");
        }
    }
};

Zebra.ChatComponent.init();
var Zebra = window.Zebra || {};

Zebra.ContactZebra = {
    countryData: {},

    init: function(data) {
        if (typeof data != 'undefined') {
            this.countryData = data;
        }
    },

    populateSupportData: function(val) {
        var countryObject = this.countryData[val];
        if(val == '') {
            $("#supportphoneNumber").text("");
            $("#supportLanguage").text("");
        }
        else {
            if(typeof countryObject['supportContactInfo'] !== 'undefined' &&
                                            countryObject['supportContactInfo'].length > 0) {

                var supportPhoneNumber = countryObject['supportContactInfo'].join();
                $("#supportphoneNumber").text(supportPhoneNumber);
            } else {
                $("#supportphoneNumber").text("");
            }
            if(typeof countryObject['supportLangInfo'] !== 'undefined' && countryObject['supportLangInfo'].length > 0) {

                var supportLanguage = countryObject['supportLangInfo'].join();
                $("#supportLanguage").text(supportLanguage);
            }
            else {
                $("#supportLanguage").text("");
            }
        }
    },

    populateCountryData: function(val) {
        var countryObject = this.countryData[val];
        $(".contactZebraChat").hide();
        if(val == '') {
            $("#phoneNumberOrEmailAddress").text("");
            $("#contactUsButton").attr("class", "primary hidden");
            $(".contact-zebra-salesforce-wrap").hide();
        } else {
            if(typeof countryObject['marketingContact'] !== 'undefined' && countryObject['marketingContact'].length > 0) {
                var phoneNumberOrEmailAddress = countryObject['marketingContact'].join();
                $("#phoneNumberOrEmailAddress").text(phoneNumberOrEmailAddress);
            } else {
                $("#phoneNumberOrEmailAddress").text("");
            }
            if((typeof countryObject['eloquaLinkURL'] !== 'undefined' && countryObject['eloquaLinkURL'].length > 0)
                && (typeof countryObject['eloquaLinkText'] !== 'undefined' && countryObject['eloquaLinkText'].length > 0)) {
                $("#contactUsButton").text(countryObject['eloquaLinkText']);
                $("#contactUsButton").attr("href", countryObject['eloquaLinkURL']);
                $("#contactUsButton").attr("class", "primary");
            } else {
                $("#contactUsButton").attr("class", "primary hidden");
            }
            $(".contact-zebra-salesforce-wrap").show();
            $("#ContactZebraChat-"+val).show();
        }
    },
    relocatedSFDCButton: function() {
        var intervalVariable = setInterval(getSFDCChatButton, 250);

        function getSFDCChatButton() {
             var sfdcChatButton = $(".embeddedServiceHelpButton");
             var sfdcChatButtonWrapper = $(".contact-zebra-salesforce-wrap");
             if (sfdcChatButton.length == 1 && sfdcChatButtonWrapper.length == 1) {
                  clearInterval(intervalVariable);
                  sfdcChatButton.appendTo(sfdcChatButtonWrapper[0]);
                  Zebra.Utility.init();
            }
        }
    },
    relocatedEnglishChatButton: function() {
             var englishChatButton = $(".zbrbot-icon");
             var sfdcChatButtonWrapper = $(".contact-zebra-salesforce-wrap");
             if (englishChatButton.length == 1 && sfdcChatButtonWrapper.length == 1) {
                  englishChatButton.appendTo(sfdcChatButtonWrapper[0]);
                  Zebra.Utility.init();
            }
    }
};

$(window).on('load', (function() {
    Zebra.ContactZebra.init();
    Zebra.ContactZebra.relocatedSFDCButton();
    Zebra.ContactZebra.relocatedEnglishChatButton();
}));
/*

    FILE: languagedropdown.js
    DESCRIPTION: Header language dropdown
    AUTHOR(S): Frankie Ramirez

*/
if(typeof(jQuery) !== "undefined") {
jQuery(function() {
    var current = localStorage.getItem('lang'),
        button = jQuery('.language-selector'),
        wrapper = jQuery('.language-dropdown'),
        selector = jQuery('.language-option li a'),
        mobileBack = jQuery('.language-dd-mobile > .icon-left-arrow'),
        doc = jQuery(document),
        isOpen = false;

    function open() {
        isOpen = true;
        //button.unbind('click');
        var viewportWidth = $(window).width();
        if (viewportWidth < 950) {

            var navHeight = $(' .nav-header-center').outerHeight() || 0;
            var utiltyFooterHeight = $('.utilty-footer').outerHeight() || 0;
            var mobileDismissHeight = $('.mobile-dismiss').outerHeight() || 0;
            var newHeight = navHeight - (utiltyFooterHeight + mobileDismissHeight) + 50;

            var top = -(newHeight + 55);

            $('.language-dropdown').css({
                'top': top + 50 + "px"
            });
            $('.language-dropdown').css({
                'height': newHeight + "px"
            });

            $('.login-dropdown').hide()

            wrapper.show("slide", {
                direction: "right"
            }, 300);



        } else {
            $('.login-dropdown').hide()

            wrapper.show();
        }
        button.addClass('selected');

        wrapper.find('ul li a').on('click', function(e) {
            button.html(jQuery(this).parent().html());
            button.removeClass('selected');
            localStorage.setItem('lang', jQuery(this).parent().data('lang'));

            if (viewportWidth < 950) {
                wrapper.hide("slide", {
                    direction: "right"
                }, 300);

            } else {
                wrapper.hide();

            }

        });

        //HIDE ON CLICK AWAY
        setTimeout(function() {
            jQuery('body').on('click', {
                elements: ['language-dropdown', 'language-selector'],
                callback: close
            }, clickEvent);
        }, 100);
    }

    function close() { // CLOSE LANGUAGE SELECTOR
        isOpen = false;
        //button.unbind('click');
        if ($(window).width() < 950) {
            wrapper.hide("slide", {
                direction: "right"
            }, 300);
        } else {
            wrapper.hide();
        }
        button.removeClass('selected');

        //button.off('click');
        //selector.off('click');
    }

    function clickEvent(e) { // EVENT TO FIRE ON CLICK AWAY
        var targets = [],
            parents = [];

        // CHECK IF TARGET OR PARENT HAS PROVIDED CLASS(ES)
        jQuery.each(e.data.elements, function(key, value) {
            targets.push(!jQuery(e.target).hasClass(value));
            parents.push(jQuery(e.target).parents().hasClass(value));
        });

        // INVOKE CALLBACK IF TARGET IS OUTSIDE OF PROVIDED CLASS(ES)
        // if ( targets.indexOf(false) < 0  && parents.indexOf(true) < 0  ) {
        //   e.data.callback();
        //   jQuery('body').off('click', clickEvent);
        // }
    }

    if (current) {
        wrapper.find('ul li a').each(function() {
            if (jQuery(this).parent().data('lang') === current) {
                button.html(jQuery(this).parent().html());
            }
        });
    } else {
        wrapper.find('ul li a').each(function() {
            if (jQuery(this).parent().data('lang') === 'us-en') {
                button.html(jQuery(this).parent().html());
            }
        });
    }
    //On click outside of the Language selector closed the DD if open
    doc.on('click', function(e) {
        if (isOpen) {
            close();
        }
    });

    button.on('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        if (isOpen) {
            close();
        } else {
            open();
        }
    });

    selector.on('click', function(e) {
        //e.preventDefault();
        close();
    });

    mobileBack.on('click', function(e) {
        //e.preventDefault();
        close();
    });
});
}
(function($) {
    var performLogin = function(event) {
            event.preventDefault();

            var destination = $(this).attr('href');

            Zebra.performLogin(destination);
        },
        performLogout = function(event) {
            event.preventDefault();

            var destination = $(this).attr('href');

            Zebra.performLogout(destination);
        },
        toggleButton = function(event) {
            event.preventDefault();

            var $component = $(this).parents('.logincomponent');
            var viewportWidth = $(window).width();
            if (viewportWidth < 950) {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                    $component.find('.login-dropdown').hide("slide", {
                        direction: "right"
                    }, 300);
                } else {
                    $('.language-dropdown').hide();
                    $(this).addClass('selected');
                    $component.find('.login-dropdown').show("slide", {
                        direction: "right"
                    }, 300);

                }

            } else {
                $('.language-dropdown').hide();

                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                    $component.find('.login-dropdown').hide();
                } else {
                    $(this).addClass('selected');
                    $component.find('.login-dropdown').show();
                }

            }

        };

    Zebra = window.Zebra || {};

    Zebra.LoginComponent = {
        hiddenAnonEls: ['.logged-in-button', '.logged-in-actions'],
        shownAnonEls: ['.login-button', '.anonymous-actions'],
        hiddenLoggedInEls: ['.login-button', '.anonymous-actions'],
        shownLoggedInEls: ['.logged-in-button', '.logged-in-actions'],

        init: function() {
            var self = this;

            $(function() {
                $(document).on('click.logincomponent', '.logincomponent .login-action', performLogin);
                $(document).on('click.logincomponent', '.logincomponent .logout-action', performLogout);
                $(document).on('click.logincomponent', '.logincomponent .logged-in-button', toggleButton);
                $(document).on('click.logincomponent', '.logincomponent .login-button', toggleButton);

                Zebra.getUserDetails().done(function(user) {
                    self.currentUser = user;
                    self.setupComponent();
                    Zebra.entitlementAnalytics.setUserAnalytics('zebra_user_analytics', user);
                });
            });
        },

        userIsLoggedIn: function() {
            return this.currentUser.userType && this.currentUser.userType !== 'Anonymous';
        },

        getUserInitials: function() {
            var firstInitial = this.currentUser.givenName ? this.currentUser.givenName[0] : '',
                lastInitial = this.currentUser.familyName ? this.currentUser.familyName[0] : '';

            return firstInitial + lastInitial;




        },



        setupUpdateProfileAction: function() {
            var $updateProfileActionWrapper = $('.update-profile-action-wrapper');

            if (this.currentUser.userType === 'Partner') {
                $('.update-partner-profile-action').show();
                $updateProfileActionWrapper.show();
            } else if (this.currentUser.userType !== 'Employee' &&
                this.currentUser.userType !== 'Contractor') {
                $('.update-other-profile-action').show();
                $updateProfileActionWrapper.show();
            } else {
                $updateProfileActionWrapper.hide();
            }
        },

        setupComponent: function() {
            var self = this;

            if (this.userIsLoggedIn()) {

                self.setupUpdateProfileAction();

                $('.logincomponent .logged-in-button .user-initials').text(self.getUserInitials());
                $(".login-button-right.register-action").hide();

                $.each(this.hiddenLoggedInEls, function(i, selector) {
                    $('.logincomponent').find(selector).hide();
                });

                $.each(this.shownLoggedInEls, function(i, selector) {
                    $('.logincomponent').find(selector).show();
                });
            } else {
                $.each(this.hiddenAnonEls, function(i, selector) {
                    $(".login-button-right.register-action").show();
                    $('.logincomponent').find(selector).hide();
                    $(".login-arrow").hide();
                });

                $.each(this.shownAnonEls, function(i, selector) {
                    $('.logincomponent').find(selector).show();
                });
            }


        }
    };
})(jQuery);
/*

    FILE: video.js
    DESCRIPTION: Zebra Video Player
    AUTHOR(S): Emily Painter

*/
var Zebra = window.Zebra || {};

Zebra.Video = {
    players: [],

    init: function() { // INITIALIZE VIDEO PLAYER
        var self = this;

        $('.video-js').each(function(index) {
            videojs(this, {
                    'techOrder': ['html5', 'flash', 'youtube'],
                    html5: !!document.createElement('video').canPlayType ? 1 : 0
                },
                function() {
                    this.on('play', function() {
                        var player = this;
                        // text box fades away on play in large screens
                        if ($(window).width() >= 800) {
                            $('.full-video__text-box').fadeOut(250);
                        }
                        $.each(self.players, function() {
                            if (this.id_ !== player.id_) {
                                try {
                                    this.pause();
                                } catch (e) {} // prevent error if video is not supported
                            }
                        });

                        $(this.posterImage.el()).hide();
                        //Hiding the BG for the thought leadership video
                        var ele = this.b;
                        if (ele) {
                            $(ele).parent().find('.tl-head').hide();
                        }
                    });

                    this.on('ended', function() {
                        var player = this;
                        // text box fades away on play in large screens
                        if ($(window).width() >= 800) {
                            $('.full-video__text-box').fadeIn(250);
                        }

                        $(this.posterImage.el()).show();
                    });
                    self.players.push(this);
                });
        });
        /*
         * This method is invoked by Thought leadership video option for Mobile Menu
         * Clicking the play button should play the video
         */
        $('.tl-video').on('click', function() {
            var tlitem = $(this).closest('.tl-item');
            var videoID = $(tlitem).find('video').attr('id')
            videojs(videoID).play();
            //hiding the play button once invoked.
            $(this).hide();
        });
    }, // END: INIT
    pauseAll: function() {
        $.each(this.players, function() {
            try {
                this.pause();
            } catch (e) {} // prevent error if video is not supported
        });
    }
};

Zebra.Video.init();
// END FILE: Zebra.video
/*

FILE: video.js
DESCRIPTION: Zebra VideoGroup Player
AUTHOR(S): Emily Painter

*/

var Zebra = window.Zebra || {};

Zebra.videoGrid = {

  init: function() { // INITIALIZE VIDEO PLAYER

    var self = this;

    self.bind();

  }, // END: INIT

  bind: function() {

    var self = this;


    // HIDE ALL BUT FIRST 3 VIDEOS
    $('ul.video-grid li.video-item').each(function(key, value) {

      if ( key > 2 ) {
        $(this).addClass('hide');
      }

    });


    $('.show-more-video').click(function(e) {
      if ( $('ul.video-grid li.video-item').hasClass('hide') ) {
        e.preventDefault();
        self.showMore();
      } else {
        e.preventDefault();
        self.showLess();
      }

    });

  },



  showLess : function() {
    var self = this;

    $('ul.video-grid li.video-item').each(function(key, value) {

      var button = $('.show-more-video').children('a'),
          alt = button.data('alt-text'),
          current = button.html();

      if ( key > 2 ) {
        $(this).addClass('hide');
        button.removeClass('hide');

        button.html(alt);
        button.data('alt-text', current);

      } else {
        button.addClass('hide');
      }

    });

  },

  showMore : function() {
    var self = this;

    $('ul.video-grid li.video-item').each(function(key, value) {

      $(this).removeClass('hide');

    });


    var button = $('.show-more-video').children('a'),
        alt = button.data('alt-text'),
        current = button.html();

    button.html(alt);
    button.data('alt-text', current);

  }

};
// END FILE: Zebra.video

var Zebra = window.Zebra || {}, $ = jQuery;

Zebra.fullWidthImage = {

    // This function calculates the left PX value for the browser width exceeding 1272 px and places accordingly.
    // The second function sets alignment for text and button for the component. Gets section along with node name
    // because the first component won't have a number after "fullwidthimage" which is the same class name as the
    // component div which was causing issues, so adding section calls the correct element to reference. Height of all
    // inner elements is used as to not get wrong height from top being added
    // The third function aligns the button with the tagline text when the brand style and right horizontal options are
    // selected. If the button is wider than the tagline text plus it's right padding or if the image has no text, the
    // button is placed 50px from the right edge when the full browser width option is selected, otherwise it's placed
    // 40px from the right edge
	init: function(fullWidthImageNodeName, isBrandStyle) {
	     if (fullWidthImageNodeName != null && fullWidthImageNodeName != "") {
            this.fullBrowserWidth('.'+fullWidthImageNodeName);
            this.verticalAlignment('.'+fullWidthImageNodeName, isBrandStyle);
            this.rightHorizontalButtonAlignment('.'+fullWidthImageNodeName, isBrandStyle);
         }
	},
	fullBrowserWidth: function (fullWidthImageNodeName){
        var browserWidth = $(window).width();
        if(browserWidth > 1272) {
            var leftPx = browserWidth - 1272;
            leftPx = leftPx / 2 + 10;

            $(fullWidthImageNodeName+".full-browser-width").css({
                left: "-" + leftPx + "px"
            });
        } else {
            $(fullWidthImageNodeName+".full-browser-width").css({
                left: 0 + "px"
            });
        }
	},
	verticalAlignment: function (fullWidthImageNodeName, isBrandStyle){
        var imageHeight = 0;
        var textItemsEle;
       if (isBrandStyle == 'yes') {
             imageHeight = $("section"+fullWidthImageNodeName).height();
             textItemsEle = $("section"+fullWidthImageNodeName).find(".text-items");
       } else {
            imageHeight = $("section"+fullWidthImageNodeName+" img").height();
            textItemsEle = $("section"+fullWidthImageNodeName).find(".text-items");
       }

       if ($("section"+fullWidthImageNodeName).hasClass("false")) {
           imageHeight = 450;
       }
       // outerHeight now returns undefined which breaks calculation. So will return 0 instead if find() can't
       // find element
       var taglineHeight = $(textItemsEle).find(".image-tagline").height() != 0 ?
                $(textItemsEle).find(".image-tagline").height() || 0 :
                $(textItemsEle).find(".image-tagline").find("p").height() || 0;
       var descriptionHeight = $(textItemsEle).find(".fw-description").find("p").outerHeight() || 0;
       var buttonHeight = $(textItemsEle).find(".button").height() != 0 ?
                $(textItemsEle).find(".button").height() :
                $(textItemsEle).find(".button").find(".call-to-action").height() || 0;
       var textItemsTrueHeight = taglineHeight + descriptionHeight + buttonHeight;
       var difference = imageHeight - textItemsTrueHeight;
       var centerTopPx = difference / 2;

        if($(textItemsEle).hasClass('top')) {
            $(textItemsEle).filter(".top").css({
                top: "0"

            });
        } else if($(textItemsEle).hasClass('center')) {
            if(centerTopPx <= 0){
				centerTopPx = 0;
        	}
            $(textItemsEle).filter(".center").css({
                bottom: centerTopPx,
                top: ""
            });
        } else if($(textItemsEle).hasClass('bottom')) {
            if(difference <= 0){
				difference = 40;
        	}

            $(textItemsEle).filter(".bottom").css({
                top: difference - 40
            });
        }
	},
	rightHorizontalButtonAlignment: function (fullWidthImageNodeName, isBrandStyle){
	    if (isBrandStyle == 'yes' && $("section"+fullWidthImageNodeName).hasClass("right-text")) {
	        if ($("section"+fullWidthImageNodeName).find(".image-tagline").length == 0) {
	            $("section"+fullWidthImageNodeName).hasClass("full-browser-width") ?
	            $("section"+fullWidthImageNodeName).find(".button").css("margin-right", "50px") :
	            $("section"+fullWidthImageNodeName).find(".button").css("margin-right", "40px");
            } else {
                var textPaddingRight =
                parseInt($("section"+fullWidthImageNodeName)
                .find(".image-tagline-text").css("padding-right").replace("px", ""));
                var buttonMarginRight = $("section"+fullWidthImageNodeName).find(".image-tagline-text").width() +
                textPaddingRight - $("section"+fullWidthImageNodeName).find(".button").find("a").outerWidth();
                if (buttonMarginRight < textPaddingRight) {
                    buttonMarginRight = textPaddingRight;
                }
                $("section"+fullWidthImageNodeName).find(".button").css("margin-right", buttonMarginRight + "px");
            }
        }
	},
};
// Circle Promo Section

/*

FILE: circlePromo.js
DESCRIPTION: Circle Promo Section

*/

var Zebra = window.Zebra || {};

Zebra.circlePromo = {

  /* - - - - - - - - - - - - - - - - - >

  CONFIGURATION & INITILIZATION

  < - - - - - - - - - - - - - - - - - */

  init: function() { // INITIALIZE Circle Promo

    var self            = this,
        promoTabParent  = $('.promo-grid li'),
        promoFirst      = $('.promo-grid li:first-child'),
        circleWidth     = $('.circle-img').outerWidth(),
        circleImage     = $('.circle-img'),
        circleIcon      = $('.circle-img i'),
        promoTab        = $('.promo-grid li h3'),
        promoArticle    = $('.promo-grid li article'),
        arrowbutton     = $('.promo-grid li > i');


    promoTabParent.append('<i class="arrow icon-down-arrow"></i>');


      if($(window).width() <= 800) {

        circleImage.css('height', circleWidth + 'px');
        circleIcon.css('line-height', circleWidth + 'px');


        promoTabParent.on('click', function(e){
          e.stopPropagation();

          $(this).first().toggleClass('selected');
          $(this).first().find('.arrow').toggleClass('icon-down-arrow icon-up-arrow');
          e.preventDefault();
        });

      }

      else  {

        $('.circle-img').css('height', circleWidth + 'px');
        $('.circle-img i').css('line-height', circleWidth + 'px');

      }


  } // END: INIT


};
// END FILE: Zebra.circlePromo

(function(document, $) {
    'use strict';

    var knowledgeArticleMarkUp =
            '<li class="knowledge-article">'
            +   '<h4><a class="knowledge-article-title"></a></h4>'
           // +   '<div class="knowledge-article-description"></div>'
            + '</li>',
        getSearchResults = function() {
            // Find all of the Knowledge Article Search Component paths
            var knowledgeArticleSearchPaths = $('.knowledge-article-search-results[data-path]').map(function () {
                return $(this).data('path');
            });

            // Request markup for all of the Knowledge Article Search Component
            $(knowledgeArticleSearchPaths).each(function(index, path){
                $.getJSON(
                    path + ".search.json"
                ).done(function(knowledgeArticlesData) {
                    console.log(JSON.stringify(knowledgeArticlesData));
                    // Populate the Knowledge Article Search Component that you received content for
                    $.each(knowledgeArticlesData, function(index, articleData) {
                        var knowledgeArticle = $(knowledgeArticleMarkUp);

                        $(".knowledge-article-title", knowledgeArticle).attr("href", articleData.url);
                        $(".knowledge-article-title", knowledgeArticle).html(articleData.title);
                      //  $(".knowledge-article-description", knowledgeArticle).html(articleData.description);

                        $('.knowledge-article-search-results[data-path="' + path + '"]').append(knowledgeArticle);
                    });
                    $('.knowledge-article-search-results[data-path="' + path + '"]').removeClass("articles-loading");
                }).fail(function() {
                    $('.knowledge-article-search-results[data-path="' + path + '"]').addClass("articles-failed");
                });
            });
        };

    $(document).ready(function() {
        if ($('.knowledge-article-search-results[data-path]').length > 0) {
            getSearchResults();
        }
    });
})(document, jQuery);
/**
 *  Press Release Component
 */
var Zebra = window.Zebra || {};
var $ = jQuery;

$(function() {

	if (typeof $('.pr-filter-container .filter-cat').selectBox !== "undefined") {
		$('.pr-filter-container').find('.filter-cat').selectBox();
	}

	Zebra.PressRelease = {
		'currentPage': 1,
		'resultsPerPage': $('.results-stats').data('one-page-count'),
		'totalResults': $('.results-stats').data('total-results-count'),
		'pageCount': $('.results-stats').data('total-page-count'),
        noResultsMsg: $('.no-results'),
		'filters': [],

		init: function() {
			if( Zebra.PressRelease.pageCount > 1 ) {
				$('.load-more').removeClass('hide');
			}

			$('.pr-box').each(function(i) {
				$(this).clone().appendTo('.pr-container');
			});

			this.bindUIfunctions();
		},

		bindUIfunctions: function() {

			$(document).on("change", ".filter-cat", function(event) {
				Zebra.PressRelease.filters = [];
				Zebra.PressRelease.currentPage = 1;

				$('.filter-cat').each(function() {
					if( $(this).val() ) {
						Zebra.PressRelease.filters.push($(this).val());
					}
				});

				Zebra.PressRelease.resetList();
			});

			$(document).on("click", ".clear-link", function(event) {
				event.preventDefault();
				Zebra.PressRelease.filters = [];
				Zebra.PressRelease.currentPage = 1;
                $('.filter-cat').each(function() {
                    var select = $(this);
                    var firstOption = select.find('option:first-child');
                    firstOption.prop('selected', true);
                    select.siblings('.selectBox-dropdown').find('.selectBox-label').text(firstOption.text());
                });
                $('.filter-cat-selectBox-dropdown-menu').find('.selectBox-selected').removeClass('selectBox-selected');

				Zebra.PressRelease.resetList();
				if( Zebra.PressRelease.totalResults <= Zebra.PressRelease.resultsPerPage ) {
					$('.load-more').addClass('hide');
				}else {
					$('.load-more').removeClass('hide');
				}
			});

			$(document).on('click', '.load-more', function() {
				if(Zebra.PressRelease.currentPage < Zebra.PressRelease.pageCount) {
					Zebra.PressRelease.currentPage++;
				}

				if(Zebra.PressRelease.currentPage == Zebra.PressRelease.pageCount) {
					$('.load-more').addClass('hide');
				}

				Zebra.PressRelease.resetList();

				return false;
			});
		},
		resetList: function() {
			var classChain = '';
			// get chain of classes for filtering
			for(var k=0, l=Zebra.PressRelease.filters.length; k<l; k++) {
				classChain += '.'+Zebra.PressRelease.filters[k];
			}
			// get total number of results
			var resultCount = Zebra.PressRelease.currentPage * Zebra.PressRelease.resultsPerPage;
			// empty all rows
			$(".pr-list").children("section.row").empty();
            // only show rows for current page
            $(".pr-list").children("section.row").each(function(i) {
				if( i < resultCount / 3 ) {
					$(this).removeClass('hide');
				}else {
					$(this).addClass('hide');
				}
			});
			// if filters exist, display filtered results
			if( classChain ) {
				// count results to make sure no duplicates occur
				var count = 0;
				// for each filtered result
				$('.pr-container .pr-box').filter(classChain).each(function(index) {
					// if still within filtered list count
					if( count < $('.pr-container .pr-box').filter(classChain).length ) {
						// current box
						var box = $(this);
						// loop through all rows
						$(".pr-list").children("section.row").each(function() {
							// if row has less than 3 pr-boxes
							if( $(this).children().length < 3 ) {
								// add box to row
								$(this).append(box.clone());
								// break loop
								return false;
							}
						});
					}
					// increase count
					count++;
				});

                if (count == 0) {
                    this.noResultsMsg.removeClass('hide');
                } else {
                    this.noResultsMsg.addClass('hide');
                }

				if( $('.pr-container .pr-box').filter(classChain).length < resultCount ) {
					// show load more if there are hidden pages
					$('.load-more').addClass('hide');
				}
			}else {
				// count results to make sure no duplicates occur
				var count = 0;
				// for each filtered result
				$('.pr-container .pr-box').each(function(index) {
					// if still within initial list count
					if( count < $('.pr-container .pr-box').length ) {
						// current box
						var box = $(this);
						// loop through all rows
						$(".pr-list").children("section.row").each(function() {
							// if row has less than 3 pr-boxes
							if( $(this).children().length < 3 ) {
								// add box to row
								$(this).append(box.clone());
								// break loop
								return false;
							}
						});
					}
					// increase count
					count++;
				});

                if (count > 0) {
                    this.noResultsMsg.addClass('hide');
                }

            }
		}
	};
	Zebra.PressRelease.init();
});
/*
    FILE: DynamicVideoList.js
    DESCRIPTION: Functionality For Dynamic Video List Component
*/

$(document).ready(function(){
  /*Adding selectbox class to language selection box*/
    $('select.video-lang-dropdown').length ? $('select.video-lang-dropdown').selectBox({mobile: true,
        keepInViewport: false }) : void(0);

  /* Adding temporary function to hide the overlay image on the video player*/
    $('.dynamicvideolist .video-player .frame').click(function(){
        $(this).hide();
        $(this).closest('.video-player').find('.vjs-big-play-button').trigger('click');
    });
    $("body").on("click", ".dynamicvideolist .video-player .vjs-big-play-button", function(){
        $(this).closest('.video-player').find('.frame').hide();
    });
  /*** END ***/

    $('.vjs-youtube').each(function(){
        var $video = $(this),
            url = $video.find('iframe.vjs-tech').attr('src'),
            video_id = url.split('?')[0].split('/')[4];

        $.getJSON('http://gdata.youtube.com/feeds/api/videos/'+video_id+'?v=2&alt=jsonc&callback=?',function(data,status,xhr){
            // Set title for YouTube video
            $video.parent().next('.dynamicvideolist__title').text(data.data.title);
        });
    });

    if($('html').hasClass('ie9')) {
        Zebra.init();
    }

    if ($(".linkList").length > 0) {
        resizeTitleList();

        $(".videoTitleList li").on("click", function() {
            $(this).parent().children().removeAttr("selected");
            $(this).attr("selected", "selected");
            generatedVideoHtml(this);
        });
    }
});

if ($(".linkList").length > 0) {
    $(window).on("load resize", function() {
        resizeTitleList();
        scrollWarningBehavior();
    });
}

//Setting size of video links list
function resizeTitleList() {
    //sets height of list items to match video max size, with a default height that is the average
    //size of videos so if issues happen at least something will display
    $(".optionsDiv").each(function() {
        var videoContainer = $(this).closest(".linkList").find(".dynamicvideolist__item.video-list-container");
        var videoHeight = $(videoContainer) && $(videoContainer).outerHeight(true) > 0 ?
        $(videoContainer).outerHeight(true) : "375px";
        $(this).css("height", videoHeight);
    });

    $(".videoTitleList").each(function() {
       var allVideos = $(this).children();
       var listSize = 0;
       if ((window.innerWidth <= 800) && allVideos.length > 0) {
           for (var i = 0; i < 5; i++) {
                var childSize = allVideos[i] ? $(allVideos[i]).outerHeight(true) : $(allVideos[0]).outerHeight();
                listSize += childSize;
           }
           var size = listSize + "px"
           $(this).css("height", size);
           $(this).parents(".optionsDiv").css("height", "");
       } else {
            $(this).css("height", "");
       }
    });
}

//This function creates the required html elements for video display for the current selected video title
function generatedVideoHtml(clickedElement) {
    //Empty Video div
    var clickedVideo = $($(clickedElement).closest("div.linkList").find("video"))
    clickedVideo[0].pause()
    clickedVideo.empty();
    $($(clickedElement).closest("div.linkList").find(".frame")).empty();
    //Get json from data attribute of li element which has all required video data
    var videoJsonString = $(clickedElement).attr("data-video-json");
    var videoJson = videoJsonString ? JSON.parse(videoJsonString) : null;

    if (videoJson != null) {
        var itemDiv = document.getElementsByClassName("dynamicvideolist__item")[0];
        var playerDiv = document.getElementsByClassName("video-player")[0];
        var videoTag = $("video.vjs-tech");

        if (videoJson.videoType == 'video/youtube') {
            var sourceTag = document.createElement('source');
            sourceTag.setAttribute("type", "video/youtube");
            sourceTag.setAttribute("src", videoJson.videoPath);
            videoTag.append(sourceTag)
        } else {
            videoJson.videoRenPaths.forEach(function (renPath) {
                var sourceTag = document.createElement('source');
                sourceTag.setAttribute("type", videoJson.videoType);
                sourceTag.setAttribute("data-analytics-name", videoJson.analyticsName);
                sourceTag.setAttribute("data-analytics-format", videoJson.analyticsFormat);
                sourceTag.setAttribute("data-analytics-tags", videoJson.analyticsTags);
                sourceTag.setAttribute("src", renPath);
                videoTag.append(sourceTag)
            });
        }
        if (videoJson.captionsPath) {
            var trackTag = document.createElement('track');
            trackTag.setAttribute("src", videoJson.captionsPath);
            trackTag.setAttribute("label", "");
            trackTag.setAttribute("kind", "captions");
            trackTag.setAttribute("srclang", "");
            videoTag.append(trackTag)
        }

        if (videoJson.previewImage) {
            var frameDiv = document.getElementsByClassName("frame")[0];
            frameDiv.setAttribute("style", "block");
            frameDiv.insertAdjacentHTML('beforeend', videoJson.previewImage);
            playerDiv.appendChild(frameDiv);
        } else {
             var frameDiv = document.getElementsByClassName("frame")[0];
             frameDiv.setAttribute("style", "none");
        }

        //Call Zebra Video to generate vjs elements
        clickedVideo[0].load()
        Zebra.Video.init();
    } else {
        $($(clickedElement).closest("div.linkList").find(".videoDisplayDiv")).append("<p>Error Displaying Video</p>");
    }
}

//Helps control when to show the scroll warning text
function scrollWarningBehavior() {
    $(".videoTitleList").each(function() {
            var currentScroll = $(this)[0].scrollHeight == $(this)[0].offsetHeight ? 0 : $(this)[0].scrollHeight;
            var nearestScrollWarning = $(this).closest(".optionsDiv").find(".scroll-warning");
            var allowedValue = parseInt(currentScroll) <= 0 ? 0 : currentScroll;
            $(nearestScrollWarning).attr("data-scroll",  allowedValue);
    });
    var scrollTimer;
    $(".video-lang-dropdown ").on("change", function() {
            var nearList = $(this).closest(".optionsDiv").find(".videoTitleList");
            var currentScroll = $(nearList)[0].scrollHeight == $(nearList)[0].offsetHeight ? 0 : $(nearList)[0].scrollHeight;
            var nearestScrollWarning = $(this).closest(".optionsDiv").find(".scroll-warning");
            var allowedValue = parseInt(currentScroll) <= 0 ? 0 : currentScroll;
            $(nearestScrollWarning).attr("data-scroll",  allowedValue);
      });

    $(".videoTitleList").on("scroll",function() {
        var currentList = $(this);
        var currentScroll = this.scrollHeight - this.offsetHeight - this.scrollTop;
        var warning =  $(this).closest(".optionsDiv").find(".scroll-warning");
        var allowedValue = parseInt(currentScroll) <= 0 ? 0 : currentScroll;
        $(warning).attr("data-scroll", allowedValue);
        $(currentList).addClass("touch");
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(function(){$(currentList).removeClass("touch");}, 50);
    });

    $(".videoTitleList").on("touchstart touchmove mouseover mouseenter", function() {
        $(this).addClass("touch");
    });
    $(".videoTitleList").on("mouseup touchend touchcancel mouseleave scrollstop", function() {
        $(this).removeClass("touch");
    });

    $(".scroll-warning").on("touchstart mouseup mouseover", function() {
            $(this).closest(".optionsDiv").find(".videoTitleList").addClass("touch");
    });

}
/*
    FILE: ImageList.js
    DESCRIPTION: Functionality For Image List Component
*/

$(document).ready(function () {
    /*Adding selectbox class to dropdown selection box*/
    $("select.Image-list-dropdown").length ? $("select.Image-list-dropdown").selectBox() : void 0;
    /*** END ***/

/*Adding FolderValues to folder dropdown*/
    $(document).on("change", "#folderList", function () {
        var currentFolderDropValue = $(this).val();
        $(".common-class").addClass("hide-Content");
        $(".titleImage").removeClass("hide-Content");
        var optionTag = $(".titleImage option");
        $(".titleImage").val("");
        $(".titleImage-selectBox-dropdown-menu li")[0].click();
        var labelValue = optionTag[0].innerText;
        $(".titleImage .selectBox-label").text(labelValue);
        for (var folderName = 1; folderName < optionTag.length; folderName++) {
            var currentOptionValue = optionTag[folderName].getAttribute("imgpath");
            if (currentOptionValue.indexOf(currentFolderDropValue) !== -1) {
                $(".titleImage-selectBox-dropdown-menu li")[folderName].style.display = "block";
            } else {
                $(".titleImage-selectBox-dropdown-menu li")[folderName].style.display = "none";
            }
        }
    });

    $(document).on("change", ".titleImage", function () {
        init();
    });
/*Adding ChildImagesValues to Image dropdown */
    function init() {
        var currentDropValue = $(".titleImage").val();
        if (currentDropValue !== "") {
            $(".common-class").removeClass("hide-Content");
            $(".qr-title").text(currentDropValue);
            var optionTag = $(".titleImage option");
            for (var imageName = 0; imageName < optionTag.length; imageName++) {
                var currentOptionValue = optionTag[imageName].innerText.trim();
                if (currentOptionValue == currentDropValue) {
                    $("#qrimage").attr("src", optionTag[imageName].getAttribute("imgpath"));
                    $(".qr-description").text(optionTag[imageName].getAttribute("imgdesc"));
                    var uniqueId = optionTag[imageName].getAttribute("imgUniqueId");
                    parameterURL(uniqueId);
                    break;
                }
            }
        } else {
            $(".common-class").addClass("hide-Content");
        }
    }
    getImageFragment();
/*Forming URL to deeplink with Image and FolderValues*/
    function parameterURL(uniqueId) {
        var newURL = window.location.href.split("#")[0];
        newURL += "#" + uniqueId;
        window.location.href = newURL;
    }

    function getImageFragment() {
        var newURL = window.location.href;
        var hash = newURL.substring(newURL.indexOf("#") + 1);
        if (hash && newURL.indexOf("#") !== -1) getOptionTagForGivenFragment(hash);
        else init();
    }

    function getOptionTagForGivenFragment(fragmentValue) {
        var optionTag = $(".titleImage option");
        for (var tag = 0; tag < optionTag.length; tag++) {
            var currentOptionValue = optionTag[tag].getAttribute("imgUniqueId");
            if (currentOptionValue == fragmentValue) {
                $(".titleImage-selectBox-dropdown-menu li").removeClass("selectBox-selected");
                $(".titleImage-selectBox-dropdown-menu li").removeClass("selectBox-hover");
                $(".titleImage-selectBox-dropdown-menu li")[tag].classList.add("selectBox-selected");
                $(".titleImage-selectBox-dropdown-menu li")[tag].classList.add("selectBox-hover");
                var selectedImagePath = optionTag[tag].getAttribute("imgpath");
                optionTag[tag].setAttribute("selected", true);
                $(".titleImage .selectBox-label ").text(optionTag[tag].innerText);
                $(".qr-title").text(optionTag[tag].innerText);
                $("#qrimage").attr("src", selectedImagePath);
                $(".qr-description").text(optionTag[tag].getAttribute("imgdesc"));
                $(".titleImage").removeClass("hide-Content");
                setFolderNameValue(selectedImagePath);
                break;
            }
        }
    }

    function setFolderNameValue(selectedImagePath) {
        var optionTag = $("#folderList option");
        for (var value = 1; value < optionTag.length; value++) {
            var currentFolderName = optionTag[value].innerText.trim();
            if (selectedImagePath.indexOf(currentFolderName) !== -1) {
                optionTag[value].setAttribute("selected", true);
                $(".folderName-selectBox-dropdown-menu li").removeClass("selectBox-selected");
                $(".folderName-selectBox-dropdown-menu li").removeClass("selectBox-hover");
                $(".folderName .selectBox-label").text(currentFolderName);
                $(".folderName-selectBox-dropdown-menu li")[value].classList.add("selectBox-selected");
                $(".folderName-selectBox-dropdown-menu li")[value].classList.add("selectBox-hover");
                break;
            }
        }
    }
});

(function(document, window, $){
    /**
     *  Tab Control Component
     */
    Zebra = window.Zebra || {};

    if (!Zebra.Tabs) {
        Zebra.Tabs = {

            init: function() {
                this.bindUIfunctions();
                this.pageLoadCorrectTab();
            },

            bindUIfunctions: function() {
                // Delegation
                $(document)
                    .on("click", ".tab-container a:not('.active')", function(event) {
                        event.preventDefault();
                        let prevPos = $(this).closest('ul').scrollLeft();
                        $(this).closest('ul').scrollLeft(prevPos + $(this).closest('li').offset().left - 10);

                        Zebra.Tabs.changeTab($(this).attr('href'));
                        $.getScript("/etc/clientlibs/zebra-www-responsive/components/content/dynamicvideolist/js/DynamicVideoList.js",
                                                function() {resizeTitleList()});
                    })
                    .on("click", ".tab-container a.active", function(event) {
                        event.preventDefault();
                        let prevPos = $(this).closest('ul').scrollLeft();
                        $(this).closest('ul').scrollLeft(prevPos + $(this).closest('li').offset().left - 10);

                        Zebra.Tabs.toggleMobileMenu(event, this);
                        $.getScript("/etc/clientlibs/zebra-www-responsive/components/content/dynamicvideolist/js/DynamicVideoList.js",
                                                                        function() {resizeTitleList()});
                    });

            },

            changeTab: function(hash) {
                if(hash) {
                    // hash variable contains value prefixed with '#'. Hence substring.
                    if(hash.indexOf('#') != -1) {
                        hash = hash.substring(1);
                    }
                    var anchor = $("[href='#" + hash + "']"),
                        div = $('#' + hash);

                    // activate correct anchor (visually)
                    anchor.addClass("active").parent().siblings().find("a").removeClass("active");

                    // activate correct div (visually)
                    div.addClass("active").siblings().removeClass("active");

                    // update URL, no history addition
                    // You'd have this active in a real situation, but it causes issues in an <iframe> (like here on CodePen) in Firefox. So commenting out.
                    // window.history.replaceState("", "", hash);

                    // Close menu, in case mobile
                    anchor.closest("ul").removeClass("open");
                }

            },

            // If the page has a hash on load, go to that tab.
            // Note that this won't work if the specified tab is in a tab control in a login state component
            // and there's a second tab control on the page that loaded before that tab control.
            pageLoadCorrectTab: function() {
                this.changeTab(document.location.hash);
            },

            toggleMobileMenu: function(event, el) {
                $(el).closest("ul").toggleClass("open");
            }

        };

        $(document).ready(function(){
            Zebra.Tabs.init();
        });
    }
})(document, window, jQuery);

// Download List

/*
FILE: downloadList.js
DESCRIPTION: Download List
*/

var Zebra = window.Zebra || {};

Zebra.downloadList = {


  init: function() {

  	//console.log('dl init');

    var self = this,
    	itemContainer = ".downloadlistitem",
        containerTitleArrow = $('.downloadlistitem h2 .arrow');

    containerTitleArrow.on('click', function(){

        //console.log('dl click');

        $(this).parents(itemContainer).first().find("ul").toggleClass('selected');
        $(this).parents(itemContainer).first().find('.arrow').toggleClass('icon-down-arrow icon-up-arrow');
    });

  } // END: INIT

};


/**
 *  Accordion Component
 */
var Zebra = window.Zebra || {};

Zebra.FeatureForOperatingSystemAccordion = {
    toggleAccordion: function(event) {
        //close any other opened accordions
        var $accordion = $(event.currentTarget);
        $('.active').not($accordion).removeClass('active');
        $('.show').not($accordion.next()).removeClass('show');

        //toggle classes to open and close accordion
        $accordion.toggleClass('active');
        $accordion.next().toggleClass('show');
    }
};

Zebra.SoftwareAccordion = {

    init: function() {
        this.bindUIfunctions();
        this.checkAchorLink();
    },

    bindUIfunctions: function() {

        // Delegation
        $(document).on("click", ".accordion-sub-header", function(event) {
            $(this).closest('.accordion-sub-container').find('.accordion-sub-symbol').html('+');

            if( $(this).hasClass('open') ) {
                $(this).removeClass('open');
                $(this).closest('.accordion-sub-container').find('.accordion-sub-content-container').removeClass('open');
            }else {
               $(this).removeClass('open');
                $(this).closest('.accordion-sub-container').find('.accordion-sub-content-container').removeClass('open');
                $(this).addClass('open');
                $(this).next().addClass('open');
                $(this).closest('.accordion-sub-container').find('.accordion-sub-symbol').html('-');
            }
            event.preventDefault();
        });

        $(document).on("click", ".accordion-topmain-header,.accordainoncheckbox", function(event) {
            var isChecked= $(this).closest('.expandaccordainonchecked').find('.accordainoncheckbox').is(":checked");
            var collapseVersionText=  $(this).closest('.accordion-topmain-content').find('.collapse-Version-text');
            var expandVersionText=  $(this).closest('.accordion-topmain-content').find('.expand-version-text');
            var collapseVersionTextshow=collapseVersionText.hasClass('show');
            var expandVersionTextshow=expandVersionText.hasClass('show');

            if($(this).attr('class') != 'accordainoncheckbox' && isChecked ==false  ){
			      $(this).closest('.accordion-topmain-content').find('.accordion-topmain-symbol').html('+');
                    if( $(this).hasClass('open') ) {
                        $(this).removeClass('open');
                        $(this).closest('.accordion-topmain-content').find('.accordion-topmain-content-container').removeClass('open');

					  	hideAccordianText(expandVersionText);
                        hideAccordianText(collapseVersionText);
                    }else {
                       $(this).removeClass('open');
                       $(this).closest('.accordion-topmain-content').find('.accordion-topmain-content-container').removeClass('open');
                   	   $(this).addClass('open');
                       $(this).next().addClass('open');
                       $(this).closest('.accordion-topmain-content').find('.accordion-topmain-symbol').html('-');

                       showAccordianText(expandVersionText);
                       hideAccordianText(collapseVersionText);
                    }
            }else if ($(this).attr('class') != 'accordainoncheckbox' && isChecked ==true && collapseVersionTextshow ){

                if( $(this).hasClass('open') ) {
                        $(this).removeClass('open');
                        $(this).closest('.accordion-topmain-content').find('.accordion-topmain-content-container').removeClass('open');
						$(this).closest('.accordion-topmain-content').find('.accordion-topmain-symbol').html('+');

	                    var parentaccrodianclass=$(this).closest('.expandaccordainonchecked');
 				   	 	var collapsesubaccoridan=parentaccrodianclass.find('.accordion-sub-header');
					 	collapsesubaccoridan.find('.accordion-sub-container').find('.accordion-sub-symbol').html('-')
                     	collapsesubaccoridan.removeClass('open');
                     	collapsesubaccoridan.next().removeClass('open');
                     	collapsesubaccoridan.find('.accordion-sub-symbol').html('+');

	                    hideAccordianText(collapseVersionText);
                     	hideAccordianText(expandVersionText);

                    }
            }else if ($(this).attr('class') != 'accordainoncheckbox' && isChecked ==true && !collapseVersionTextshow ){

		                $(this).removeClass('open');
                        $(this).closest('.accordion-topmain-content').find('.accordion-topmain-content-container').removeClass('open');
                      	$(this).addClass('open');
                        $(this).next().addClass('open');
        	            $(this).closest('.accordion-topmain-content').find('.accordion-topmain-symbol').html('-');

	               	    showAccordianText(expandVersionText);
      	                hideAccordianText(collapseVersionText);

						$(this).closest('.expandaccordainonchecked').find('.accordainoncheckbox').attr("checked", false);
            }else{
                if(isChecked){
					var parentaccrodianclass=$(this).closest('.expandaccordainonchecked');

            	    var openTopAccordian=parentaccrodianclass.find('.accordion-topmain-header');
					 openTopAccordian.find('.accordion-topmain-symbol').html('+');
                     openTopAccordian.addClass('open');
                     openTopAccordian.next().addClass('open');
                     openTopAccordian.find('.accordion-topmain-symbol').html('-');

                	 var openSubAccordian=parentaccrodianclass.find('.accordion-sub-header');
					 openSubAccordian.addClass('open');
                     openSubAccordian.next().addClass('open');
                     openSubAccordian.find('.accordion-sub-symbol').html('-');

	                 showAccordianText(collapseVersionText);
                     hideAccordianText(expandVersionText);
                }else{
				    var parentaccrodianclass=$(this).closest('.expandaccordainonchecked');

                    var openTopAccordian=parentaccrodianclass.find('.accordion-topmain-header');
                    openTopAccordian.find('.accordion-topmain-symbol').html('+');
                    openTopAccordian.addClass('open');
                    openTopAccordian.next().addClass('open');
                    openTopAccordian.find('.accordion-topmain-symbol').html('-');

 				   	 var collapsesubaccoridan=parentaccrodianclass.find('.accordion-sub-header');
					 collapsesubaccoridan.find('.accordion-sub-container').find('.accordion-sub-symbol').html('-')
                     collapsesubaccoridan.removeClass('open');
                     collapsesubaccoridan.next().removeClass('open');
                     collapsesubaccoridan.find('.accordion-sub-symbol').html('+');

                     showAccordianText(expandVersionText);
                     hideAccordianText(collapseVersionText);
                }
            }

            event.stopPropagation();

        });

        function  showAccordianText(showText){
             if( showText.hasClass('hide') ) {
                    showText.removeClass('hide');
                    showText.addClass('show');
             }
        }

        function hideAccordianText(hideText){
            if( hideText.hasClass('show') ) {
                    hideText.removeClass('show');
                    hideText.addClass('hide');
              }
   		}

    },

    checkAchorLink: function() {
        $(document).ready(function() {
            if( location.hash && $(location.hash).hasClass('accordion-content-container') ) {
                $('.accordion-container').find('..accordion-symbol').html('+');
                $('.accordion-content-container').removeClass('open');
                $(location.hash).addClass('open').prev().find('.accordion-symbol').html('-');
            }
        });
    },
	unCheckAccordianCheckbox: function() {
        $(document).ready(function() {
          $('.accordainoncheckbox').attr("checked", false);
        });
    }


};

Zebra.SoftwareAccordion.init();
Zebra.Dialogs.PressRelease = {

  pullDataFromPageProperties : function(field, record, path) {
      var targetField = field.getName().replace('../../','./');
      var pathParts = path.split('/');
      pathParts.pop();
      pathParts.pop();
      var jcrContentPath = pathParts.join('/');
      var response = CQ.utils.HTTP.get(jcrContentPath +'.json');
      eval('var data ='+response.responseText);
      var originalPropName = field.getName().replace('../../', '');
      if(data[originalPropName] != undefined){
          var originalPropVal = data[originalPropName];
          field.setValue(originalPropVal);
          return false;
      }
  }
};

function sbg(){
	var buttons = document.getElementsByClassName('sbg-button')

	for(var i=0;i<buttons.length;i++){
		var button = buttons[i]

		if(button.hasAttribute('data-sbg-isBinded')){continue}
		button.setAttribute('data-sbg-isBinded','true')

		var network = button.getAttribute('data-sbg-network')

		bindButton(network,button)
	}

	function bindButton(network,button){
		var height = button.getAttribute('data-sbg-height')
			,width = button.getAttribute('data-sbg-width')
			,top = Math.max(0,(screen.height-height)/2)
			,left = Math.max(0,(screen.width-width)/2)
			,specs = 
				'height='+height+',width='+width+',top='+top+',left='+left
				+',status=0,toolbar=0,directories=0,location=0'
				+',menubar=0,resizable=1,scrollbars=1'
			,windowName = 'sbg-window-'+Math.random()

		switch(network){
			case 'facebook':
				var url = buildUrl('http://www.facebook.com/sharer.php',{
					's':100
					,'p[url]':button.getAttribute('data-sbg-url')
					,'p[title]':button.getAttribute('data-sbg-title')
					,'p[summary]':button.getAttribute('data-sbg-summary')
					,'p[images][0]':button.getAttribute('data-sbg-image')
				})
				button.onclick=function(){
					window.open(url,windowName,specs);
				}
				break;
			case 'twitter':
				var url = buildUrl('http://twitter.com/intent/tweet',{
					'text':button.getAttribute('data-sbg-text')
					,'via':button.getAttribute('data-sbg-via')
					,'hashtags':button.getAttribute('data-sbg-hashtags')
				})
				button.onclick=function(){
					window.open(url,windowName,specs);
				}
				break;
			case 'linkedin':
				var url = buildUrl('http://www.linkedin.com/shareArticle',{
					'mini':'true'
					,'url':button.getAttribute('data-sbg-url')
					,'title':button.getAttribute('data-sbg-title')
					,'source':button.getAttribute('data-sbg-source')
					,'summary':button.getAttribute('data-sbg-summary')
				})
				button.onclick=function(){
					window.open(url,windowName,specs);
				}
				break;
			case 'google-plus':
				var url = buildUrl(' https://plus.google.com/share',{
					'url':button.getAttribute('data-sbg-url')
				})
				button.onclick=function(){
					window.open(url,windowName,specs);
				}
				break;
			case 'pinterest':
				var url = buildUrl('http://www.pinterest.com/pin/create/button/',{
					'url':button.getAttribute('data-sbg-url')
					,'media':button.getAttribute('data-sbg-media')
					,'description':button.getAttribute('data-sbg-description')
				})
				button.onclick=function(){
					window.open(url,windowName,specs);
				}
				break;
			case 'email':
				var url = buildUrl('mailto:',{
					'su':button.getAttribute('data-sbg-subject')
					,'subject':button.getAttribute('data-sbg-subject')
					,'body':button.getAttribute('data-sbg-body')
				})
				button.setAttribute('href',url)
				break;

		}
	}

	function buildUrl(url, parameters){
	  var qs = "";
	  for(var key in parameters) {
	    var value = parameters[key];
	    if(!value){continue}
	   	value = value.toString().split('\"').join('"');
	    qs += key + "=" + encodeURIComponent(value) + "&";
	  }
	  if (qs.length > 0){
	    qs = qs.substring(0, qs.length-1); //chop off last "&"
	    url = url + "?" + qs;
	  }
	  return url;
	}

}
/*
    FILE: socialshare.js
    DESCRIPTION: Global Social Share Component
*/

var Zebra = window.Zebra || {};

Zebra.socialshare = {

    init: function() {
        $('.share-action').on('click', function() {
            $('.socialshare').toggleClass('open');
        });
    } // END: INIT
};

	
var Zebra = window.Zebra || {}, $ = jQuery;

Zebra.shadedBoxContainer = {

    //TO DO : Remove this function when the global wrapper of 1272 px is removed
    // This function calculates the left PX value for the browser width exceeding 1272 px and places accordingly.
	init: function() {
        var browserWidth = $(window).width();
        if(browserWidth > 1272) {
			var leftPx = browserWidth - 1272;
            leftPx = leftPx / 2 + 10;

            $(".shaded-box-container.fullWidthShadedBox").css({
                left: "-" + leftPx + "px"
            });
        }
	},
};

$(window).on('load resize', (function() {
    Zebra.shadedBoxContainer.init();
}));
// Hero Image Carousel

/*

    FILE: heroCarousel.js
    DESCRIPTION: Zebra Hero Image Carousel
    AUTHOR(S): Emily Painter, Jesse Weed

*/

var Zebra = window.Zebra || {};

Zebra.heroCarousel = {

  /* - - - - - - - - - - - - - - - - - >

        CONFIGURATION & INITILIZATION

    < - - - - - - - - - - - - - - - - - */

    init: function() { // INITIALIZE HERO CAROUSEL
        var self = this;

        $('.carousel-container').each(function() {
            // get speed for data attribute
            var speed = parseInt($(this).data('interval')) * 1000,
                carousel = $(this).find('.carousel'),
                container = $(this);

            if( container.data('style') == 'dots' ) {
                // hide arrows
                container.find('.arrow-control').addClass('invisible');
                // when mouse enters carousel, show arrows
                container.on('mouseenter', function() {
                    $(this).find('.arrow-control').removeClass('invisible');
                });
                // when mouse leaves carousel, hide arrows
                container.on('mouseleave', function() {
                    $(this).find('.arrow-control').addClass('invisible');
                });
                carousel.find('video').on('play', function() {
                    carousel.slick('slickPause');
                });

                carousel.find('video').on('pause', function() {
                    carousel.slick('slickPlay');
                });

                carousel.on('beforeChange', function(event, slick, currentSlide, nextSlide){
                    Zebra.Video.pauseAll();
                    container.find('.thumb').find('.overlay').removeClass('active');
                    container.find('.thumb[data-index="' + nextSlide + '"]').find('.overlay').addClass('active');
                });

                // activate carousel
                carousel.slick({
                    dots: true,
                    infinite: true,
                    autoplaySpeed: speed,
                    slidesToShow: 1,
                    centerMode: false,
                    variableWidth: false,
                    autoplay: carousel.data('rotate'),
                    arrows: true,
                    prevArrow: '<a class="arrow-control arrow-prev"><i class="icon-left-arrow"></i></a>',
                    nextArrow: '<a class="arrow-control arrow-next"><i class="icon-right-arrow"></i></a>'
                });
            }else {
                carousel.slick({
                    dots: false,
                    infinite: true,
                    autoplaySpeed: speed,
                    slidesToShow: 1,
                    centerMode: false,
                    variableWidth: false,
                    autoplay: carousel.data('rotate'),
                    arrows: true,
                    prevArrow: '<a class="arrow-control arrow-prev"><i class="icon-left-arrow"></i></a>',
                    nextArrow: '<a class="arrow-control arrow-next"><i class="icon-right-arrow"></i></a>'
                });

                if( container.find('.thumb').length < 6 ) {
                    container.find('.thumb-container').addClass('single-column');
                }

                carousel.on('beforeChange', function(event, slick, currentSlide, nextSlide){
                    Zebra.Video.pauseAll();
                    container.find('.thumb').find('.overlay').removeClass('active');
                    container.find('.thumb[data-index="' + nextSlide + '"]').find('.overlay').addClass('active');
                });

                container.find('.thumb').on('click', function() {
                    Zebra.Video.pauseAll();
                    carousel.slick('slickGoTo', parseInt($(this).data('index')), false);
                    container.find('.thumb').find('.overlay').removeClass('active');
                    $(this).find('.overlay').addClass('active');
                });
            }
        });
    }
};
// END FILE: Zebra.heroCarousel

//start This was added for old browser to show up carousel Image
if(Zebra.Dialogs === undefined){
    Zebra.Dialogs={};
}
//end This was added for old browser to show up carousel Image


Zebra.Dialogs.HeroCarousel = {

  fieldsToShowCarouselItem : {
    "none" : ["itemType"],
    "image" : ["itemType"],
    "video" : ["itemType", "videoPath"],
    "" : ["itemType"]
  },

  toggleFields : function(selection) {
    try {
      var selectedVal = selection.getValue();
    } catch(e) {}

    if(selectedVal) {
      var fieldSet = selection.findParentByType("dialogfieldset");
      var fields = this.fieldsToShowCarouselItem[selectedVal];

      var self = this;
      $.each(fieldSet.items.items, function(index, field) {
        var name = /\/([^\/]*)\/?$/.exec(field.getName())[1];

        if($.inArray(name, fields) >= 0) {
          Zebra.Dialogs.showField(field);
        } else {
          Zebra.Dialogs.hideField(field);
        }
      });
    }
  },

  toggleDotStyleField : function(selection) {
    try {
        var selectedVal = selection.getValue();
    } catch(e) {}

    if(selectedVal) {
        var dialog = selection.findParentByType("dialog");
        var field = dialog.getField("./dotStyle");
        if(selectedVal == 'dots') {
            Zebra.Dialogs.showField(field);
        } else {
            Zebra.Dialogs.hideField(field);
        }
      }
    }
};

//This was added for old browser to show up carousel Image
Zebra.heroCarousel.init();
/**
 *  Component Report
 */
var Zebra = window.Zebra || {};

Zebra.Report = {

    init: function() {

        this.ajaxGenerate();
    },

    ajaxGenerate: function() {


         $(document).ready(function() {
				var cPath= $("#cPath");
			 });
        $(document).on("click", ".generate-report", function(event) {
            $.ajax("/bin/zebra/componentreport", {
				dataType: "text",
				data: {cpath: cPath.value},
				success: function(rawData, status, xhr) {

				   window.location="/bin/zebra/componentreport?cpath="+cPath.value;

				},
				error: function(xhr, status, err) {
					console.log("Error in creating excel for component report");
				} 
          });
        });

    }


};

Zebra.Report.init();
Zebra.Dialogs.Report = {

 dynammicPopulation : function(dlg) {
	    dialog=dlg;
        var contentPath = "/apps/zebra-www-responsive/components/content";
        var pagePath = "/apps/zebra-www-responsive/components/page";
        var ajax1 = CQ.shared.HTTP.get(contentPath+".2.json",function(options,success,response){
        });
        var ajax2 = CQ.shared.HTTP.get(pagePath+".2.json",function(options,success,response){
        });

        $.when(ajax1,ajax2).done(function( a1, a2 ) {
            var retainedValue;
            var list = Zebra.Dialogs.Report.getComponentList(a1,contentPath).concat(Zebra.Dialogs.Report.getComponentList(a2,pagePath));
            var componentBox = dialog.getField("./componentPath");
            componentBox.setOptions(list.sort(Zebra.Dialogs.Report.compare));
            retainedValue = componentBox.nextSibling().getValue();

        if(retainedValue){
        	componentBox.setValue(retainedValue);
        }
});
},

  retainValue : function(field, fieldValue) {
      field.nextSibling().setValue(fieldValue);
    },

  getComponentList : function(ajaxData,path){
            var componentObject;
            var componentArray=[];
            if(ajaxData[1]==="success"){
                var pageObj= ajaxData[0]; 
                for(child in pageObj){
                    if(!(child.includes(":"))){
                        var childObj = pageObj[child];
                        var childType = childObj["jcr:primaryType"];
                        if(childType && childType==="cq:Component"){
                            var childTitle = childObj["jcr:title"];
                            componentObject={
                                value: path+"/"+child,
                                text: childTitle
                            }
                            componentArray.push(componentObject);
                        }
                        else if(childType && childType==="nt:folder"){
                            for(nextChild in childObj){
                                if(!(nextChild.includes(":"))){
                                    var nextChildObj = childObj[nextChild];
                                    var nextChildType = nextChildObj["jcr:primaryType"];
                                    if(nextChildType && nextChildType==="cq:Component"){
                                        var nextChildTitle = nextChildObj["jcr:title"];
                                        componentObject={
                                            value: path+"/"+child+"/"+nextChild,
                                            text: nextChildTitle
                                        }
                                        componentArray.push(componentObject);
                                    }
                                }
                            }
                        }
                    }
                }
            }
         return componentArray;
        },
    compare : function (a,b) {
          if (a.text < b.text)
            return -1;
          if (a.text > b.text)
            return 1;
          return 0;
        }
};

(function(document, window, $){
    "use strict";

    Zebra = window.Zebra || {};

    var performLogin = function(event) {
        event.preventDefault();

        var destination = $(this).attr("href");

        Zebra.performLogin(destination);
    },
    initLoginButtonListeners = function() {
        $(document).ready(function(){
            $(document).on("click.loginbutton", ".loginbutton .login", performLogin);
        });
    };

    if (!Zebra.LoginButtonListenersInitialized) {
        // This prevents the listeners from being initialized twice if a login button is ajaxed in
        // but in this case we can register the listeners regardless of whether the ajax process for one of the
        // buttons is complete or not.
        initLoginButtonListeners();
        Zebra.LoginButtonListenersInitialized = true;
    }
})(document, window, jQuery);

(function(document, $){
    "use strict";

    Zebra = Zebra || {};
    Zebra.loginStateLoaded = Zebra.loginStateLoaded || $.Deferred();

    var triggerLoadedEvent = function() {
        Zebra.loginStateLoaded.resolve();
    },
    populateLoginState = function() {
        // Find all of the Application Tile paths
        var loginStateContainerPaths = $('.loginstate > [data-path]').map(function () {
            return $(this).data('path');
        }),
        loginStateContentRequests = [];

        $(loginStateContainerPaths).each(function(index, path){
            var loginStateContentRequest = $.ajax({
                dataType: 'html',
                url: path + '.loginstateresults.html',
                cache: false
            });

            loginStateContentRequest.done(function(loginStateContent) {
                var loginStateLocation = $('.loginstate > [data-path="' + path + '"]');

                if (loginStateLocation) {
                    loginStateLocation.parent('.loginstate').replaceWith(loginStateContent);
                }
            });

            loginStateContentRequest.fail(function() {
                $('.loginstate > [data-path="' + path + '"]').addClass("login-state-failed");
            });

            loginStateContentRequests.push(loginStateContentRequest);
        });

        $.when.apply(this, loginStateContentRequests).then(triggerLoadedEvent);
    };

    Zebra.LoginState = Zebra.LoginState || {
        init: function() {
             $(document).ready(function(){

                var pathname = window.location.href;
                var mode = getCookie("cq-authoring-mode");
                 if(mode != undefined) {

                // If executes in classic pages, preview
                if(mode != "TOUCH"){
                        if ($('.loginstate > [data-path]').length > 0) {
                            populateLoginState();
                        } else {
                            triggerLoadedEvent();
                        }
                } 
				//we check if touch ui and not in edit or preview mode
                else if((mode == "TOUCH") && (getCookie("cq-editor-layer.page") == "Edit")) {
                            triggerLoadedEvent();
                    } 
                else if((mode == "TOUCH") && (getCookie("cq-editor-layer.page") == "Preview")) {
							populateLoginState();
                        }
                 } else {
					 // Code executes in publisher mode
						if ($('.loginstate > [data-path]').length > 0) {
                            populateLoginState();
                        } else {
                            triggerLoadedEvent();
                        }
                 }
            });
        }
    };
})(document, jQuery);
    // Cookie Data from Browsers
    function getCookie(cname) {

        var name = cname + "=";

        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }


/*
    FILE: solutionuses.js
    DESCRIPTION: Mobile slide for solutionuses.jsp
    AUTHOR(S): Dinko Kecanovic
*/

var Zebra = window.Zebra || {};

Zebra.solutionuses = {


  init: function() {

		if($(window).width() <= 481) {
			
			var prev							= $('.solution-prev'),
				next 							= $('.solution-next');

			$('.solution-toggle').removeClass('hide');

			$('.solution-container li:first-child').addClass('selected');

			var $first 	= $('.solution-container li:first', 'ul'),
			    $last 	= $('.solution-container li:last', 'ul');

    if($(".solution-container li:first").hasClass('selected')){
        prev.hide();
    }

			next.on('click', function() {
			    var $next,
			        $selected = $(".selected");

			    $next = $selected.next('li').length ? $selected.next('li') : $first;
			    $selected.removeClass("selected").fadeOut('fast');
			    $next.addClass('selected').fadeIn('fast');

                if($(".solution-container li:last").hasClass('selected')){
                    next.hide();
                    prev.show();
                }
                else {
                    next.show();
                    prev.show();
                }

            });

			prev.on('click', function() {
			    var $prev,
			        $selected = $(".selected");

			    $prev = $selected.prev('li').length ? $selected.prev('li') : $last;
			    $selected.removeClass("selected").fadeOut('fast');
			    $prev.addClass('selected').fadeIn('fast');

				    if($(".solution-container li:first").hasClass('selected')){
				        prev.hide();
				        next.show();
				    }
				    else {
				        prev.show();
				        next.show();
				    }
				    
          });

        }

  } // END: INIT

};



Zebra.solutionuses.init();

if($(window).width() <= 481) {
	$(window).resize(function() { 	// resize: if user rotates phone landscape/portrait.
		Zebra.solutionuses.init();	
	});
}

	
/**
 *  Table Grid
 */
var Zebra = window.Zebra || {};

Zebra.TableGrid = {

    init: function() {
        this.buildMobileView();
    },

    buildMobileView: function() {
        var $desktopContainer = $('.table-grid-container'),
            $mobileContainer = $('.table-grid-mobile'),
            $tablegrid = $('.tablegrid.section');


        if ($(window).width() < 799 && !$('.table-grid-container').hasClass("comparison-theme")) {

            var columnCount = $('table th').length;

            $('.tablegrid th').each(function(index1) {
                var th = $(this);

                $('.tablegrid td').each(function(index2) {
                    if( index2 % columnCount == index1 ) {
                        $('.tablegrid th').hide();
                        $(this).prepend('<div><h4 class="title">'+th.html()+'</h4>');
                    }
                });
            });

        } 

        else if ( $(window).width() < 799 && $desktopContainer.hasClass("comparison-theme") ) {
            $tablegrid.find('table').addClass('hide');

            var columnCount = $tablegrid.find('th').length;

            if( $mobileContainer.children().length == 0 ) {
                $tablegrid.find('th').each(function(index1) {
                    if( index1 > 0 ) {
                        $mobileDetails = $('<div class="mobile-details"></div>');
                        $mobileDetails.append($(this).html());

                        $tablegrid.find('td').each(function(index2) {
                            if( index2 % columnCount == 0 ) {
                                $mobileDetails.append('<h4 class="title">' + $(this).html() + '</h4>');
                            }else if( index2 % columnCount == index1 ) {
                                $mobileDetails.append('<p>' + $(this).html() + '</p>');
                            }
                        });

                        $mobileContainer.append($mobileDetails);
                    }
                });
            }

            $mobileContainer.removeClass('hide');

        } else if($desktopContainer.hasClass('comparison-theme')) {
            $tablegrid.find('table').removeClass('hide');
            $mobileContainer.addClass('hide');
        }
    }
};

Zebra.TableGrid.init();
/*
    FILE: thumbGrid.js
    DESCRIPTION: Thumbnail Grid Drawer Section
    AUTHOR(S): Emily Painter
*/
var Zebra = window.Zebra || {};

Zebra.thumbGrid = {

    init: function() { // INITIALIZE thumbnail grid section functions

        $('.thumbnail-drawer').each(function() {
            var currDrawer = $(this);
            var thumbs = currDrawer.find('li');
            var showMoreButton = currDrawer.find('.show-more');

            for (var i = 0; i < thumbs.length; i += 6) {
                if (i == 6) {
                    showMoreButton.show();
                }
                thumbs.slice(i + 6).wrapAll('<li class="hidden-thumbnails"><ul></ul></li>');
            }

            var hiddenThumbs = currDrawer.find('.hidden-thumbnails');

            showMoreButton.on('click', function() {
                hiddenThumbs.addClass('visible');
                $(this).hide();
            });
        });

    }

};

var Zebra = window.Zebra || {}, $ = jQuery;

Zebra.angleComponent = {

	init: function() {
        var viewportWidth = $(window).width();
        if (viewportWidth > 835) {
            $('.desk-view').show();
            $('.mobile-view').hide();
        }
        else {
            $('.desk-view').hide();
            $('.mobile-view').show();
        }
	},
};
$(window).on('load resize', (function() {
    Zebra.angleComponent.init();
}));
function utilityCompVisibility() {
    var viewportWidth = $(window).width();
    if (viewportWidth < 950) {
        $('.headerutility-desktop').hide();
        $('.utility-mobile').show();
    } else {
        $('.headerutility-desktop').show();
        $('.utility-mobile').hide();
    }
}
$(window).on('load resize', (utilityCompVisibility));
/*

	FILE: Secondarynav.js
	DESCRIPTION: Secondary navigation
	AUTHOR(S): Akanksha Singh

*/
jQuery(function() {


    var Zebra = window.Zebra || {},
        scrollPosition = 0;

    Zebra.SecNav = {



        init: function() { // INITIALIZE NAVIGATION
            var self = this;

            var secondaryNav = jQuery('.sec-nav');
            if (secondaryNav.length) {
                jQuery('body').addClass('has-secondary-nav');
                //sticky header functionality
                $('.secondarynavigation').addClass("sticky sec");
            }




            // secondary nav functionality
            secondaryNav.on('mouseenter', '.sec-nav-item', self.hoverSecMenu)
                .on('mouseleave', '.sec-nav-item', self.leaveSecMenu)
                .on('click', '.sec-nav-link', self.toggleSecMenu);

            jQuery('.sec-toggle-container').on('click', '.sec-toggle-btn', self.toggleMainMenu);

            //allow for desktop only
            if ($(window).width() > 950) {
                //sticky header adjustments
                self.applyStickySpace();
            }

        }, // END: INIT


        toggleMainMenu: function() {
            jQuery('.sec-nav').toggleClass('menu-shown');
            jQuery(this).find('i').toggleClass('icon-down-arrow icon-up-arrow');
            $(".sec-nav-item.selected  .sec-sub-wrap").hide();
            $(".sec-nav-item:not(.selected)").show();
			$(".sec-nav-item.selected .sec-mobile-label").removeClass("shifting");

            jQuery('.sec-nav-item.selected')
                .removeClass('selected')
                .find('i')
                .toggleClass('icon-left-arrow  icon-right-arrow');
            return false;
        },



        hoverSecMenu: function(e) {
            clearTimeout(self.timeout2);

            if (window.innerWidth > 834) {
                var target = jQuery(e.target);
                if (!target.hasClass('sec-nav-item')) {
                    target = target.closest('.sec-nav-item');
                }
                target.siblings('.selected').removeClass('selected');
                target.addClass('selected');
            }

            return false;
        },

        leaveSecMenu: function(e) {
            if (window.innerWidth > 834) {
                var target = jQuery(e.target);
                if (!target.hasClass('sec-nav-item')) {
                    target = target.closest('.sec-nav-item');
                }
                if (target.find('ul').length == 0) {
                    target.removeClass('selected');
                    return false;
                }
                self.timeout2 = setTimeout(function() {
                    target.removeClass('selected');
                }, 400);
            }

            return false;
        },

        toggleSecMenu: function() {

            if (window.innerWidth < 835) {
                var menuItem = jQuery(this);
                if (menuItem.hasClass('sec-has-sub')) {
                    if (!menuItem.parent().hasClass('selected')) {
                        jQuery('.sec-nav-item.selected').removeClass('selected')
                            .find('i')
                            .toggleClass(' icon-left-arrow icon-right-arrow');

                        menuItem
                            .parent()
                            .addClass('selected');

                        $(".sec-nav-item.selected  .sec-sub-wrap").show("slide", {
                            direction: "right"
                        }, 300);


                        $(".sec-nav-item:not(.selected)").hide();
						$(".sec-nav-item.selected .sec-mobile-label").addClass("shifting");

                        menuItem
                            .find('i')
                            .toggleClass('icon-right-arrow  icon-left-arrow');
                    } else {

                        $(".sec-nav-item.selected  .sec-sub-wrap").hide("slide", {
                            direction: "right"
                        }, 300);
                        $(".sec-nav-item:not(.selected)").show();
						$(".sec-nav-item.selected .sec-mobile-label").removeClass("shifting");

                        jQuery('.sec-nav-item.selected')
                            .removeClass('selected')
                            .find('i')
                            .toggleClass('icon-left-arrow  icon-right-arrow');
                    }
                    return false;
                }
            }
        },
        //Applies and Adjust margin-top to kep secondary nav below primary nav
        applyStickySpace: function() {
            if($(window).scrollTop() === 0 && $('.headerutility-desktop').css("display") != "none") {
                $('.secondarynavigation').css("margin-top", ($(".global-header").height())+"px");
            } else if($(window).scrollTop() > 0) {
                $('.secondarynavigation').css("margin-top", ($(".navigationcomponent").height())+"px");
            }
           window.addEventListener('scroll', function(e) {
                if($(window).scrollTop() == 0 && $('.headerutility-desktop').css("display") == "block") {
                //Timeout allows for new size of global-header to be referenced accurately while scroll event firing
                    if($('.cookie-container').css("display") == "none") {
                        $('.secondarynavigation').css("margin-top", ($(".global-header").height())+"px");
                    }
                    else {
                        setTimeout(function() {
                            $('.secondarynavigation').css("margin-top", ($(".global-header").height())+"px");
                        }, 55);
                    }
                } else if($(window).scrollTop() > 0) {
                    $('.secondarynavigation').css("margin-top", ($(".navigationcomponent").height())+"px");
                }
           });
        }
    };

    Zebra.SecNav.init();
    // END FILE: Zebra.Nav

});
jQuery(function() {

    var Zebra = window.Zebra || {};

    Zebra.ImageTextComponent = {
        init: function() {
           // This function will set image width to be based on component container width to allow it to be responsive
           // within div or if under parallax container component styling remove set css
           $(window).on("load resize", function() {
               $(".image-text .par-container img").each(function() {
                    if ($(this).parents(".parallaxcontainer").length !== 0) {
                        $(this).css({
                            "max-width": "",
                            "height": ""
                        });
                    } else {
                        $(this).css({
                            "max-width": $(this).closest(".par-container").width() + "px",
                            "height": "auto"
                        });
                    }

               });
           });

        }
    };
    Zebra.ImageTextComponent.init();
});
/*

    FILE: image.js
    DESCRIPTION: Image component functions
    AUTHOR(S): Frankie Ramirez

*/

var Zebra = window.Zebra || {};

Zebra.Image = {

    /* - - - - - - - - - - - - - - - - - >

        CONFIGURATION & INITILIZATION

    < - - - - - - - - - - - - - - - - - */

    init: function() { // INITIALIZE NAVIGATION
        var self = this;

        self.setSizes();

        jQuery(window).resize(function() {
            self.setSizes();
        });
    }, // END: INIT

    setSizes: function() {
        if( jQuery(window).width() > 700 ) {
            $('.hero-bkg-img').each(function(i) {
                var desktopHeight = $(this).data('d-height'),
                    desktopWidth = $(this).data('d-width');

                $(this).find('img').css({
                    'height': ( desktopHeight ) ? desktopHeight : 'auto',
                    'width': ( desktopWidth ) ? desktopWidth : 'auto'
                });
            });
        }else {
            $('.hero-bkg-img').each(function(i) {
                var mobileHeight = $(this).data('m-height'),
                    mobileWidth = $(this).data('m-width');

                $(this).find('img').css({
                    'height': ( mobileHeight ) ? mobileHeight : 'auto',
                    'width': ( mobileWidth ) ? mobileWidth : 'auto'
                });
            });
        }
    }

};


// END FILE: Zebra.Search
//Invoke the Logout User Servlet

$(document).ready(function() {

    $(".proximity-logout-user").click(function(){

         var destination = $(this).attr('href');

        Zebra.performLogout(destination);

    });
});

var Zebra = window.Zebra || {};

Zebra.Dialogs.EvergageConfiguration = {

    validatePagePath : function(value) {
        var pageCount = 0;
        $(".evergageDialogPagePath").each(function() {
            if (this.value === value) {
                pageCount++;
            }
        });

        if (pageCount <= 1) {
            return true;
        } else {
           return "Error! This page has already been authored with a property";
        }
    },

    toggleProperty : function(selection) {
        selection.nextSibling().hide();
		selection.nextSibling().nextSibling().nextSibling().hide();
        var selectedVal = selection.getValue();
        if(selectedVal=="true"){
			selection.nextSibling().show();
			selection.nextSibling().nextSibling().nextSibling().show();
        }

	}
};
$(document).on("click", ".run-script", function (event) {
        var currentPath = window.location.pathname.replace(".html", "");
        var scriptStatus = document.getElementById("script-status");
        scriptStatus.innerText = "Running the task in background. Please wait. Once done, download the file.";
        window.location="/bin/zebra/nodefinder?pagePath="+currentPath;
});
var Zebra = window.Zebra || {};

Zebra.Dialogs.TDCSubmissionsDeleteConfiguration = {

    validateEndingDate: function(value) {
       var endDate = new Date(value).getTime();
       var startDateInput = $(".submissionsStartDateInput")[0].value;
       var startDate = startDateInput ? new Date(startDateInput).getTime() : 0;

        if (endDate > startDate) {
            return true;
        } else {
           return "Error! End Date must be later then start date";
        }
    }
};
/**
 *  Component Report
 */
var Zebra = window.Zebra || {};

Zebra.TDCSubmissionDelete = {

    //init function that will call the ajaxGenerate method on document load
    init: function() {
        this.ajaxGenerate();
    },

    // Will get node paths from delete button and click and then call servlet and once a response is received will display outcome
    // gets current time before and after ajax call to calculate a script runtime
    ajaxGenerate: function(nodes) {
        $(document).on("click", ".delete-button", function (event) {
           var nodes = $(this).attr("data-node-list");
           var scriptStatus = document.getElementById("script-status");
           var start_time = new Date().getTime();
           scriptStatus.innerHTML = "Running script in background, Please wait";
          $.ajax({
            type: "POST",
            url: "/bin/zebra/tdcsubmissionsdeletescript",
            dataType: "json",
            data: {
                nodePaths: nodes
            },
             success: function (rawData, status, xhr) {
                if (status == "success") {
                    var end_time =  new Date().getTime();
                    var runTime = Math.round(((end_time - start_time)/1000)/60);
                    var missingNodesCount = rawData.missingAssets;
                    var deletedNodesCount = rawData.deletedAssets;
                    var messageString = "<strong>Delete Script Runtime: </strong>" + runTime + " minute(s)" +
                    "<br> Success: Number of Deleted Submissions= " + deletedNodesCount;
                    if (missingNodesCount > 0) {
                        messageString = messageString.concat("<br> Fail: Number of Submissions Nodes unable to be deleted= ", missingNodesCount);
                    }
                    scriptStatus.innerHTML = messageString;
                } else {
                    console.log("Error: Something went wrong");
                    scriptStatus.innerHTML = "Failed: Issue Displaying Return Data - Possible script was run with no results found";
                }
            },
            error: function (xhr, status, err) {
                console.log("Error in running TDC submission delete script");
                scriptStatus.innerHTML = "Failed: Error in running TDC submission delete script";
            }
          });
      });
    }
};
Zebra.TDCSubmissionDelete.init();
// Use this file to call functions on page load

jQuery(function() {

  if ($('.dropdown-js').length) { 
    jQuery('.dropdown-js').selectBox({
    	mobile: true,
    	hideOnWindowScroll: false
    });
  }
    
     /*** Script is added for the breadcrumb show/hide functionality:
          Page properties - under 'basic' tab , Hide in Nav and Hide Breadcrumb checkboxes are designed to toggle
     ****/
    $('body').click(function(){
    
            $("input[name='./hideInNav']").change(function() {
			    if($(this).is(":checked")){
                      $("input[name='./hideBreadcrumb']").attr('checked', false);
                    }    
                });
                
            $("input[name='./hideBreadcrumb']").change(function() {
                if($(this).is(":checked")){
                    $("input[name='./hideInNav']").attr('checked', false);
                }    
            });
    });

});
